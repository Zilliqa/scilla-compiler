Closure converted module:
scilla_version 0

fundef ($fundef_1 : [Message] -> List (Message)) ((msg : Message) : Message)
environment: ()
body:
  decl ($retval_2 : List (Message))
  decl (nil_msg : List (Message))
  (nil_msg : List (Message)) = Nil { Message }
  ($retval_2 : List (Message)) = Cons { Message }(msg : Message) (nil_msg : List (Message))
  ret ($retval_2 : List (Message))

library:
  lib_decl (one_msg : [Message] -> List (Message))
  (one_msg : [Message] -> List (Message)) = [($fundef_1 : [Message] -> List (Message))]
  lib_decl (not_owner_code : Int32)
  (not_owner_code : Int32) = (Int32 1)
  lib_decl (set_hello_code : Int32)
  (set_hello_code : Int32) = (Int32 2)

contract HelloWorld
((owner : ByStr20) : ByStr20)

(welcome_msg : String) : String = 
  ($welcome_msg_3 : String) = (String "")
  ret ($welcome_msg_3 : String)

transition setHello ((msg : String) : String)
  decl (is_owner : Bool)
  (is_owner : Bool) = eq (owner : ByStr20) (_sender : ByStr20)
  match (is_owner : Bool) with
  | False =>
    decl (e : Event)
    (e : Event) = { _eventname : (String "setHello()"); code : (not_owner_code : Int32) }
    event (e : Event)
  | True =>
    (welcome_msg : String) := (msg : String)
    decl (e : Event)
    (e : Event) = { _eventname : (String "setHello()"); code : (set_hello_code : Int32) }
    event (e : Event)

transition getHello ()
  decl (r : String)
  (r : String) <- (welcome_msg : String)
  decl (e : Event)
  (e : Event) = { _eventname : (String "getHello()"); msg : (r : String) }
  event (e : Event)

transition multipleMsgs ()
  decl (msg1 : Message)
  (msg1 : Message) = { _tag : (String ""); _recipient : (_sender : ByStr20); _amount : (Uint128 0) }
  decl (msg2 : Message)
  (msg2 : Message) = { _tag : (String ""); _recipient : (_sender : ByStr20); _amount : (Uint128 0) }
  decl (msgs1 : List (Message))
  decl ($one_msg_0 : List (Message))
  ($one_msg_0 : List (Message)) = (one_msg : [Message] -> List (Message)) (msg1 : Message)
  (msgs1 : List (Message)) = ($one_msg_0 : List (Message))
  decl (msgs2 : List (Message))
  (msgs2 : List (Message)) = Cons { Message }(msg2 : Message) (msgs1 : List (Message))
  send (msgs2 : List (Message))

transition contrAddr ()
  decl (msg1 : Event)
  (msg1 : Event) = { _eventname : (String "ContractAddress"); addr : (_this_address : ByStr20) }
  event (msg1 : Event)

LLVM module:
; ModuleID = 'HelloWorld'
source_filename = "HelloWorld"

{ "warnings": [], "gas_remaining": "4001350" }
