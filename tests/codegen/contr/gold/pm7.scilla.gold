Closure converted module:
scilla_version 0



library:
  (list_foldr : forall 'A. forall 'B. ('A -> 'B -> 'B) -> 'B -> List ('A) -> 'B) = []
  (list_foldl : forall 'A. forall 'B. ('B -> 'A -> 'B) -> 'B -> List ('A) -> 'B) = []
  (list_foldk : forall 'A. forall 'B. ('B -> 'A -> ('B -> 'B) -> 'B) -> 'B -> List ('A) -> 'B) = []
  (nat_foldk : forall 'T. ('T -> Nat -> ('T -> 'T) -> 'T) -> 'T -> Nat -> 'T) = []
  (nat_fold : forall 'T. ('T -> Nat -> 'T) -> 'T -> Nat -> 'T) = []

contract PM7
()

procedure create_event ((m : Int32) : Int32)
  (e : Event) = { _eventname : (String "test"); message : (m : Int32) }
  event (e : Event)

transition t1 ((p : List (Option (Int32))) : List (Option (Int32)))
  (z : Int32) = (Int32 1)
  (y : Int32) = (Int32 2)
  (v : Int32) = (Int32 3)
  match (p : List (Option (Int32))) with
  | Cons (_p_1 : Option (Int32)) (_p_2 : List (Option (Int32))) =>
    match (_p_2 : List (Option (Int32))) with
    | Cons (__p_2_5 : Option (Int32)) (__p_2_6 : List (Option (Int32))) =>
      match (__p_2_6 : List (Option (Int32))) with
      | Nil =>
        create_event (y : Int32)
      | Cons (___p_2_6_9 : Option (Int32)) (___p_2_6_10 : List (Option (Int32))) =>
        match (___p_2_6_10 : List (Option (Int32))) with
        | Nil =>
          create_event (z : Int32)
        | _ =>
          jump _joinp_7
      join _joinp_7 =>
        match (__p_2_5 : Option (Int32)) with
        | Some (___p_2_5_8 : Int32) =>
          create_event (y : Int32)
        | _ =>
          jump _joinp_3
    | _ =>
      jump _joinp_3
    join _joinp_3 =>
      match (_p_1 : Option (Int32)) with
      | Some (__p_1_4 : Int32) =>
        create_event (v : Int32)
      | _ =>
        jump _joinp_0
  | _ =>
    jump _joinp_0
  join _joinp_0 =>
    create_event (z : Int32)

LLVM module:
; ModuleID = 'PM7'
source_filename = "PM7"

{ "warnings": [], "gas_remaining": "4002000" }
