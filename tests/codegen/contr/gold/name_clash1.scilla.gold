Closure converted module:
scilla_version 0



library:
  (list_foldr : forall 'A. forall 'B. ('A -> 'B -> 'B) -> 'B -> List ('A) -> 'B) = []
  (list_foldl : forall 'A. forall 'B. ('B -> 'A -> 'B) -> 'B -> List ('A) -> 'B) = []
  (list_foldk : forall 'A. forall 'B. ('B -> 'A -> ('B -> 'B) -> 'B) -> 'B -> List ('A) -> 'B) = []
  (nat_foldk : forall 'T. ('T -> Nat -> ('T -> 'T) -> 'T) -> 'T -> Nat -> 'T) = []
  (nat_fold : forall 'T. ('T -> Nat -> 'T) -> 'T -> Nat -> 'T) = []

contract NameClash1
()

(x : Int32) : Int32
  (x : Int32) = (Int32 1)

procedure create_event ((m : Int32) : Int32)
  (e : Event) = { _eventname : (String "test"); message : (m : Int32) }
  event (e : Event)

transition t1 ((c : Bool) : Bool)
  (_x_0 : Int32) <- (x : Int32)
  (_x_1 : List (Int32)) = Nil { Int32 }
  match (_x_1 : List (Int32)) with
  | Cons (_x_2 : Int32) (__x_1_4 : List (Int32)) =>
    (_x_3 : Int32) = (_x_2 : Int32)
  | Nil =>
    (_x_3 : Int32) = (Int32 2)
  create_event (_x_3 : Int32)

LLVM module:
; ModuleID = 'NameClash1'
source_filename = "NameClash1"

{ "warnings": [], "gas_remaining": "4002000" }
