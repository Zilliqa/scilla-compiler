Closure converted module:
scilla_version 0



library:
  (list_foldr : forall 'A. forall 'B. [['A] -> (['B] -> 'B)] -> (['B] -> ([List ('A)] -> 'B))) = []
  (list_foldl : forall 'A. forall 'B. [['B] -> (['A] -> 'B)] -> (['B] -> ([List ('A)] -> 'B))) = []
  (list_foldk : forall 'A. forall 'B. [['B] -> (['A] -> ([['B] -> 'B] -> 'B))] -> (['B] -> ([List ('A)] -> 'B))) = []
  (nat_foldk : forall 'T. [['T] -> ([Nat] -> ([['T] -> 'T] -> 'T))] -> (['T] -> ([Nat] -> 'T))) = []
  (nat_fold : forall 'T. [['T] -> ([Nat] -> 'T)] -> (['T] -> ([Nat] -> 'T))) = []

contract NameClash1
()

(x : Int32) : Int32 = 
  ($x_5 : Int32) = (Int32 1)
  ret ($x_5 : Int32)

procedure create_event ((m : Int32) : Int32)
  (e : Event) = { _eventname : (String "test"); message : (m : Int32) }
  event (e : Event)

transition t1 ((c : Bool) : Bool)
  ($x_0 : Int32) <- (x : Int32)
  ($x_1 : List (Int32)) = Nil { Int32 }
  match ($x_1 : List (Int32)) with
  | Cons ($x_2 : Int32) ($$x_1_4 : List (Int32)) =>
    ($x_3 : Int32) = ($x_2 : Int32)
  | Nil =>
    ($x_3 : Int32) = (Int32 2)
  create_event ($x_3 : Int32)

LLVM module:
; ModuleID = 'NameClash1'
source_filename = "NameClash1"

{ "warnings": [], "gas_remaining": "4002000" }
