Closure converted module:
scilla_version 0



library:
  (list_foldr : forall 'A. forall 'B. [['A] -> (['B] -> ('B))] -> (['B] -> ([List ('A)] -> ('B)))) = []
  (list_foldl : forall 'A. forall 'B. [['B] -> (['A] -> ('B))] -> (['B] -> ([List ('A)] -> ('B)))) = []
  (list_foldk : forall 'A. forall 'B. [['B] -> (['A] -> ([['B] -> ('B)] -> ('B)))] -> (['B] -> ([List ('A)] -> ('B)))) = []
  (nat_foldk : forall 'T. [['T] -> ([Nat] -> ([['T] -> ('T)] -> ('T)))] -> (['T] -> ([Nat] -> ('T)))) = []
  (nat_fold : forall 'T. [['T] -> ([Nat] -> ('T))] -> (['T] -> ([Nat] -> ('T)))) = []

contract PM1
()

procedure create_event ((m : Int32) : Int32)
  (e : Event) = { _eventname : (String "test"); message : (m : Int32) }
  event (e : Event)

transition t1 ((c : Bool) : Bool)
  (x : Int32) = (Int32 42)
  (y : Int32) = (Int32 41)
  match (c : Bool) with
  | True =>
    create_event (x : Int32)
  | _ =>
    jump $joinp_0
  join $joinp_0 =>
    create_event (y : Int32)

LLVM module:
; ModuleID = 'PM1'
source_filename = "PM1"

{ "warnings": [], "gas_remaining": "4002000" }
