(* Church-encoded natural numbers *)
(* zero *)
let c0 = tfun 'X => fun (s : 'X -> 'X) => fun (z : 'X) => z
in
(* one *)
let c1 = tfun 'X => fun (s : 'X -> 'X) => fun (z : 'X) => s z
in
(* two *)
let c2 = tfun 'X => fun (s : 'X -> 'X) => fun (z : 'X) => let sz = s z in s sz
in
(* exponentiation *)
let cexp : (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X) =
  fun (m : forall 'X. ('X -> 'X) -> 'X -> 'X) =>
  fun (n : forall 'X. ('X -> 'X) -> 'X -> 'X) =>
  tfun 'X =>
  let ni = @n ('X -> 'X) in
  let mi = @m 'X in
  ni mi
in
(* Convert Church-encoded nats to Uint32 *)
let church_nat_to_uint32 : (forall 'X. ('X -> 'X) -> 'X -> 'X) -> Uint32 =
  fun (c : forall 'X. ('X -> 'X) -> 'X -> 'X) =>
    let zero = Uint32 0 in
    let one = Uint32 1 in
    let add1 = fun (x : Uint32) => builtin add one x in
    let c32 = @c Uint32 in
    c32 add1 zero
in
(* tests *)

let four = Uint32 4 in
let n = builtin to_nat four in
let folder = @nat_fold (forall 'X. ('X -> 'X) -> 'X -> 'X) in

let accf =
  fun (c : forall 'X. ('X -> 'X) -> 'X -> 'X) =>
  fun (i : Nat) =>
    cexp c c
in

let res = folder accf c2 n in
church_nat_to_uint32 res
