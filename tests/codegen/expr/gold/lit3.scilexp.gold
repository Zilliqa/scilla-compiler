Closure converted AST:


expr_body:
  ($expr_0 : List (Int32)) = Nil { Int32 }
  ret ($expr_0 : List (Int32))
LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%List_Int32 = type { i8, %Cons_Int32*, %Nil_Int32* }
%Cons_Int32 = type <{ i8, %Int32, %List_Int32* }>
%Int32 = type { i32 }
%Nil_Int32 = type <{ i8 }>

define %List_Int32* @"$scilla_expr_1"(void*) {
entry:
  %"$expr_0" = alloca %List_Int32*
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Nil_Int32* getelementptr (%Nil_Int32, %Nil_Int32* null, i32 1) to i32))
  %"$adtval_2" = bitcast i8* %malloccall to %Nil_Int32*
  %"$adtgep_3" = getelementptr inbounds %Nil_Int32, %Nil_Int32* %"$adtval_2", i32 0, i32 0
  store i8 1, i8* %"$adtgep_3"
  %"$adtptr_4" = bitcast %Nil_Int32* %"$adtval_2" to %List_Int32*
  store %List_Int32* %"$adtptr_4", %List_Int32** %"$expr_0"
  %"$$expr_0_5" = load %List_Int32*, %List_Int32** %"$expr_0"
  ret %List_Int32* %"$$expr_0_5"
}

declare noalias i8* @malloc(i32)

