Closure converted AST:
fundef ($fundef_2 : [Int32] -> Int32) ((a : Int32) : Int32)
environment: ()
body:
  decl ($retval_3 : Int32)
  ($retval_3 : Int32) = (a : Int32)
  ret ($retval_3 : Int32)

expr_body:
  decl ($expr_1 : Int32)
  decl (f : [Int32] -> Int32)
  (f : [Int32] -> Int32) = [($fundef_2 : [Int32] -> Int32)]
  decl (i : Int32)
  (i : Int32) = (Int32 0)
  decl ($f_0 : Int32)
  ($f_0 : Int32) = (f : [Int32] -> Int32) (i : Int32)
  ($expr_1 : Int32) = ($f_0 : Int32)
  ret ($expr_1 : Int32)
LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"$$fundef_2_env_4" = type {}
%Int32 = type { i32 }

define %Int32 @"$fundef_2"(%"$$fundef_2_env_4"*, %Int32) {
entry:
  %"$retval_3" = alloca %Int32
  store %Int32 %1, %Int32* %"$retval_3"
  %"$$retval_3_5" = load %Int32, %Int32* %"$retval_3"
  ret %Int32 %"$$retval_3_5"
}

define %Int32 @"$scilla_expr_6"(void*) {
entry:
  %"$expr_1" = alloca %Int32
  %"$f_0" = alloca %Int32
  %i = alloca %Int32
  %f = alloca { %Int32 (void*, %Int32)*, void* }
  store { %Int32 (void*, %Int32)*, void* } { %Int32 (void*, %Int32)* bitcast (%Int32 (%"$$fundef_2_env_4"*, %Int32)* @"$fundef_2" to %Int32 (void*, %Int32)*), void* null }, { %Int32 (void*, %Int32)*, void* }* %f
  store %Int32 zeroinitializer, %Int32* %i
  %"$f_10" = load { %Int32 (void*, %Int32)*, void* }, { %Int32 (void*, %Int32)*, void* }* %f
  %"$f_fptr_11" = extractvalue { %Int32 (void*, %Int32)*, void* } %"$f_10", 0
  %"$f_envptr_12" = extractvalue { %Int32 (void*, %Int32)*, void* } %"$f_10", 1
  %"$i_13" = load %Int32, %Int32* %i
  %"$f_call_14" = call %Int32 %"$f_fptr_11"(void* %"$f_envptr_12", %Int32 %"$i_13")
  store %Int32 %"$f_call_14", %Int32* %"$f_0"
  %"$$f_0_15" = load %Int32, %Int32* %"$f_0"
  store %Int32 %"$$f_0_15", %Int32* %"$expr_1"
  %"$$expr_1_16" = load %Int32, %Int32* %"$expr_1"
  ret %Int32 %"$$expr_1_16"
}

