Closure converted AST:
fundef ($fundef_8 : [List (Option (Int32))] -> Int32) ((p : List (Option (Int32))) : List (Option (Int32)))
environment: ((v : Int32) : Int32 , (y : Int32) : Int32 , (z : Int32) : Int32)
body:
  (v : Int32) <- [($fundef_8 : [List (Option (Int32))] -> Int32)]((v : Int32))
  (y : Int32) <- [($fundef_8 : [List (Option (Int32))] -> Int32)]((y : Int32))
  (z : Int32) <- [($fundef_8 : [List (Option (Int32))] -> Int32)]((z : Int32))
  decl ($retval_9 : Int32)
  match (p : List (Option (Int32))) with
  | Cons ($p_1 : Option (Int32)) ($p_2 : List (Option (Int32))) =>
    match ($p_2 : List (Option (Int32))) with
    | Cons ($$p_2_5 : Option (Int32)) ($$p_2_6 : List (Option (Int32))) =>
      match ($$p_2_6 : List (Option (Int32))) with
      | Nil =>
        ($retval_9 : Int32) = (y : Int32)
      | _ =>
        jump ($joinp_3 : Int32)
    | Nil =>
      ($retval_9 : Int32) = (z : Int32)
    join ($joinp_3 : Int32) =>
      match ($p_1 : Option (Int32)) with
      | Some ($$p_1_4 : Int32) =>
        ($retval_9 : Int32) = (v : Int32)
      | _ =>
        jump ($joinp_0 : Int32)
  | _ =>
    jump ($joinp_0 : Int32)
  join ($joinp_0 : Int32) =>
    ($retval_9 : Int32) = (z : Int32)
  ret ($retval_9 : Int32)

expr_body:
  decl ($expr_7 : [List (Option (Int32))] -> Int32)
  decl (z : Int32)
  (z : Int32) = (Int32 1)
  decl (y : Int32)
  (y : Int32) = (Int32 2)
  decl (v : Int32)
  (v : Int32) = (Int32 3)
  decl (f : [List (Option (Int32))] -> Int32)
  allocate_closure_env ($fundef_8 : [List (Option (Int32))] -> Int32)
  [($fundef_8 : [List (Option (Int32))] -> Int32)]((v : Int32)) <- (v : Int32)
  [($fundef_8 : [List (Option (Int32))] -> Int32)]((y : Int32)) <- (y : Int32)
  [($fundef_8 : [List (Option (Int32))] -> Int32)]((z : Int32)) <- (z : Int32)
  (f : [List (Option (Int32))] -> Int32) = [($fundef_8 : [List (Option (Int32))] -> Int32)]
  ($expr_7 : [List (Option (Int32))] -> Int32) = (f : [List (Option (Int32))] -> Int32)
  ret ($expr_7 : [List (Option (Int32))] -> Int32)

Specialized types:
ADTs:
Option:
  Int32
List:
  Option (Int32)
Maps:
  
ByStrX: 

LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"$TyDescrTy_PrimTyp_10" = type { i32, i32 }
%_TyDescrTy_Typ = type { i32, i8* }
%"$TyDescrTy_ADTTyp_32" = type { { i8*, i32 }, i32, i32, %"$TyDescrTy_ADTTyp_Specl_31"** }
%"$TyDescrTy_ADTTyp_Specl_31" = type { i32, %_TyDescrTy_Typ**, %"$TyDescrTy_ADTTyp_Constr_33"**, %"$TyDescrTy_ADTTyp_32"* }
%"$TyDescrTy_ADTTyp_Constr_33" = type { { i8*, i32 }, i32, %_TyDescrTy_Typ** }
%TyDescrString = type { i8*, i32 }
%_Int32 = type { i32 }
%"$$fundef_8_env_57" = type { %_Int32, %_Int32, %_Int32 }
%"List_Option_(Int32)" = type { i8, %"Cons_Option_(Int32)"*, %"Nil_Option_(Int32)"* }
%"Cons_Option_(Int32)" = type <{ i8, %Option_Int32*, %"List_Option_(Int32)"* }>
%Option_Int32 = type { i8, %Some_Int32*, %None_Int32* }
%Some_Int32 = type <{ i8, %_Int32 }>
%None_Int32 = type <{ i8 }>
%"Nil_Option_(Int32)" = type <{ i8 }>

@"$TyDescr_Int32_Prim_11" = global %"$TyDescrTy_PrimTyp_10" zeroinitializer
@"$TyDescr_Int32_12" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_Int32_Prim_11" }
@"$TyDescr_Uint32_Prim_13" = global %"$TyDescrTy_PrimTyp_10" { i32 1, i32 0 }
@"$TyDescr_Uint32_14" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_Uint32_Prim_13" }
@"$TyDescr_Int64_Prim_15" = global %"$TyDescrTy_PrimTyp_10" { i32 0, i32 1 }
@"$TyDescr_Int64_16" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_Int64_Prim_15" }
@"$TyDescr_Uint64_Prim_17" = global %"$TyDescrTy_PrimTyp_10" { i32 1, i32 1 }
@"$TyDescr_Uint64_18" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_Uint64_Prim_17" }
@"$TyDescr_Int128_Prim_19" = global %"$TyDescrTy_PrimTyp_10" { i32 0, i32 2 }
@"$TyDescr_Int128_20" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_Int128_Prim_19" }
@"$TyDescr_Uint128_Prim_21" = global %"$TyDescrTy_PrimTyp_10" { i32 1, i32 2 }
@"$TyDescr_Uint128_22" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_Uint128_Prim_21" }
@"$TyDescr_Int256_Prim_23" = global %"$TyDescrTy_PrimTyp_10" { i32 0, i32 3 }
@"$TyDescr_Int256_24" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_Int256_Prim_23" }
@"$TyDescr_Uint256_Prim_25" = global %"$TyDescrTy_PrimTyp_10" { i32 1, i32 3 }
@"$TyDescr_Uint256_26" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_Uint256_Prim_25" }
@"$TyDescr_String_Prim_27" = global %"$TyDescrTy_PrimTyp_10" { i32 2, i32 0 }
@"$TyDescr_String_28" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_String_Prim_27" }
@"$TyDescr_Bystr_Prim_29" = global %"$TyDescrTy_PrimTyp_10" { i32 7, i32 0 }
@"$TyDescr_Bystr_30" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_10"* @"$TyDescr_Bystr_Prim_29" }
@"$TyDescr_ADT_Option_Int32_34" = unnamed_addr constant %_TyDescrTy_Typ { i32 1, %"$TyDescrTy_ADTTyp_Specl_31"* @"$TyDescr_Option_Int32_ADTTyp_Specl_44" }
@"$TyDescr_ADT_List_Option_(Int32)_35" = unnamed_addr constant %_TyDescrTy_Typ { i32 1, %"$TyDescrTy_ADTTyp_Specl_31"* @"$TyDescr_List_Option_(Int32)_ADTTyp_Specl_54" }
@"$TyDescr_Option_ADTTyp_37" = unnamed_addr constant %"$TyDescrTy_ADTTyp_32" { %TyDescrString { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"$TyDescr_ADT_Option_46", i32 0, i32 0), i32 6 }, i32 2, i32 1, %"$TyDescrTy_ADTTyp_Specl_31"** getelementptr inbounds ([1 x %"$TyDescrTy_ADTTyp_Specl_31"*], [1 x %"$TyDescrTy_ADTTyp_Specl_31"*]* @"$TyDescr_Option_ADTTyp_m_specls_45", i32 0, i32 0) }
@"$TyDescr_Option_Some_Int32_Constr_m_args_38" = unnamed_addr constant [1 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_Int32_12"]
@"$TyDescr_ADT_Some_39" = unnamed_addr constant [4 x i8] c"Some"
@"$TyDescr_Option_None_Int32_Constr_m_args_40" = unnamed_addr constant [0 x %_TyDescrTy_Typ*] zeroinitializer
@"$TyDescr_ADT_None_41" = unnamed_addr constant [4 x i8] c"None"
@"$TyDescr_Option_Int32_ADTTyp_Specl_m_constrs_42" = unnamed_addr constant [2 x %"$TyDescrTy_ADTTyp_Constr_33"*] [%"$TyDescrTy_ADTTyp_Constr_33"* { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_Some_39", i32 0, i32 0), i32 4 }, i32 1, %_TyDescrTy_Typ** getelementptr inbounds ([1 x %_TyDescrTy_Typ*], [1 x %_TyDescrTy_Typ*]* @"$TyDescr_Option_Some_Int32_Constr_m_args_38", i32 0, i32 0) }, %"$TyDescrTy_ADTTyp_Constr_33"* { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_None_41", i32 0, i32 0), i32 4 }, i32 0, %_TyDescrTy_Typ** getelementptr inbounds ([0 x %_TyDescrTy_Typ*], [0 x %_TyDescrTy_Typ*]* @"$TyDescr_Option_None_Int32_Constr_m_args_40", i32 0, i32 0) }]
@"$TyDescr_Option_Int32_ADTTyp_Specl_m_TArgs_43" = unnamed_addr constant [1 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_Int32_12"]
@"$TyDescr_Option_Int32_ADTTyp_Specl_44" = unnamed_addr constant %"$TyDescrTy_ADTTyp_Specl_31" { i32 1, %_TyDescrTy_Typ** getelementptr inbounds ([1 x %_TyDescrTy_Typ*], [1 x %_TyDescrTy_Typ*]* @"$TyDescr_Option_Int32_ADTTyp_Specl_m_TArgs_43", i32 0, i32 0), %"$TyDescrTy_ADTTyp_Constr_33"** getelementptr inbounds ([2 x %"$TyDescrTy_ADTTyp_Constr_33"*], [2 x %"$TyDescrTy_ADTTyp_Constr_33"*]* @"$TyDescr_Option_Int32_ADTTyp_Specl_m_constrs_42", i32 0, i32 0), %"$TyDescrTy_ADTTyp_32"* @"$TyDescr_Option_ADTTyp_37" }
@"$TyDescr_Option_ADTTyp_m_specls_45" = unnamed_addr constant [1 x %"$TyDescrTy_ADTTyp_Specl_31"*] [%"$TyDescrTy_ADTTyp_Specl_31"* @"$TyDescr_Option_Int32_ADTTyp_Specl_44"]
@"$TyDescr_ADT_Option_46" = unnamed_addr constant [6 x i8] c"Option"
@"$TyDescr_List_ADTTyp_47" = unnamed_addr constant %"$TyDescrTy_ADTTyp_32" { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_List_56", i32 0, i32 0), i32 4 }, i32 2, i32 1, %"$TyDescrTy_ADTTyp_Specl_31"** getelementptr inbounds ([1 x %"$TyDescrTy_ADTTyp_Specl_31"*], [1 x %"$TyDescrTy_ADTTyp_Specl_31"*]* @"$TyDescr_List_ADTTyp_m_specls_55", i32 0, i32 0) }
@"$TyDescr_List_Cons_Option_(Int32)_Constr_m_args_48" = unnamed_addr constant [2 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_ADT_Option_Int32_34", %_TyDescrTy_Typ* @"$TyDescr_ADT_List_Option_(Int32)_35"]
@"$TyDescr_ADT_Cons_49" = unnamed_addr constant [4 x i8] c"Cons"
@"$TyDescr_List_Nil_Option_(Int32)_Constr_m_args_50" = unnamed_addr constant [0 x %_TyDescrTy_Typ*] zeroinitializer
@"$TyDescr_ADT_Nil_51" = unnamed_addr constant [3 x i8] c"Nil"
@"$TyDescr_List_Option_(Int32)_ADTTyp_Specl_m_constrs_52" = unnamed_addr constant [2 x %"$TyDescrTy_ADTTyp_Constr_33"*] [%"$TyDescrTy_ADTTyp_Constr_33"* { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_Cons_49", i32 0, i32 0), i32 4 }, i32 2, %_TyDescrTy_Typ** getelementptr inbounds ([2 x %_TyDescrTy_Typ*], [2 x %_TyDescrTy_Typ*]* @"$TyDescr_List_Cons_Option_(Int32)_Constr_m_args_48", i32 0, i32 0) }, %"$TyDescrTy_ADTTyp_Constr_33"* { %TyDescrString { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"$TyDescr_ADT_Nil_51", i32 0, i32 0), i32 3 }, i32 0, %_TyDescrTy_Typ** getelementptr inbounds ([0 x %_TyDescrTy_Typ*], [0 x %_TyDescrTy_Typ*]* @"$TyDescr_List_Nil_Option_(Int32)_Constr_m_args_50", i32 0, i32 0) }]
@"$TyDescr_List_Option_(Int32)_ADTTyp_Specl_m_TArgs_53" = unnamed_addr constant [1 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_ADT_Option_Int32_34"]
@"$TyDescr_List_Option_(Int32)_ADTTyp_Specl_54" = unnamed_addr constant %"$TyDescrTy_ADTTyp_Specl_31" { i32 1, %_TyDescrTy_Typ** getelementptr inbounds ([1 x %_TyDescrTy_Typ*], [1 x %_TyDescrTy_Typ*]* @"$TyDescr_List_Option_(Int32)_ADTTyp_Specl_m_TArgs_53", i32 0, i32 0), %"$TyDescrTy_ADTTyp_Constr_33"** getelementptr inbounds ([2 x %"$TyDescrTy_ADTTyp_Constr_33"*], [2 x %"$TyDescrTy_ADTTyp_Constr_33"*]* @"$TyDescr_List_Option_(Int32)_ADTTyp_Specl_m_constrs_52", i32 0, i32 0), %"$TyDescrTy_ADTTyp_32"* @"$TyDescr_List_ADTTyp_47" }
@"$TyDescr_List_ADTTyp_m_specls_55" = unnamed_addr constant [1 x %"$TyDescrTy_ADTTyp_Specl_31"*] [%"$TyDescrTy_ADTTyp_Specl_31"* @"$TyDescr_List_Option_(Int32)_ADTTyp_Specl_54"]
@"$TyDescr_ADT_List_56" = unnamed_addr constant [4 x i8] c"List"

define %_Int32 @"$fundef_8"(%"$$fundef_8_env_57"*, %"List_Option_(Int32)"*) {
entry:
  %"$$fundef_8_env_v_58" = getelementptr inbounds %"$$fundef_8_env_57", %"$$fundef_8_env_57"* %0, i32 0, i32 0
  %"$v_envload_59" = load %_Int32, %_Int32* %"$$fundef_8_env_v_58"
  %v = alloca %_Int32
  store %_Int32 %"$v_envload_59", %_Int32* %v
  %"$$fundef_8_env_y_60" = getelementptr inbounds %"$$fundef_8_env_57", %"$$fundef_8_env_57"* %0, i32 0, i32 1
  %"$y_envload_61" = load %_Int32, %_Int32* %"$$fundef_8_env_y_60"
  %y = alloca %_Int32
  store %_Int32 %"$y_envload_61", %_Int32* %y
  %"$$fundef_8_env_z_62" = getelementptr inbounds %"$$fundef_8_env_57", %"$$fundef_8_env_57"* %0, i32 0, i32 2
  %"$z_envload_63" = load %_Int32, %_Int32* %"$$fundef_8_env_z_62"
  %z = alloca %_Int32
  store %_Int32 %"$z_envload_63", %_Int32* %z
  %"$retval_9" = alloca %_Int32
  %"$p_tag_66" = getelementptr inbounds %"List_Option_(Int32)", %"List_Option_(Int32)"* %1, i32 0, i32 0
  %"$p_tag_67" = load i8, i8* %"$p_tag_66"
  switch i8 %"$p_tag_67", label %"$default_68" [
    i8 0, label %"$Cons_69"
  ]

"$Cons_69":                                       ; preds = %entry
  %"$p_70" = bitcast %"List_Option_(Int32)"* %1 to %"Cons_Option_(Int32)"*
  %"$$p_1_gep_71" = getelementptr inbounds %"Cons_Option_(Int32)", %"Cons_Option_(Int32)"* %"$p_70", i32 0, i32 1
  %"$$p_1_load_72" = load %Option_Int32*, %Option_Int32** %"$$p_1_gep_71"
  %"$p_1" = alloca %Option_Int32*
  store %Option_Int32* %"$$p_1_load_72", %Option_Int32** %"$p_1"
  %"$$p_2_gep_73" = getelementptr inbounds %"Cons_Option_(Int32)", %"Cons_Option_(Int32)"* %"$p_70", i32 0, i32 2
  %"$$p_2_load_74" = load %"List_Option_(Int32)"*, %"List_Option_(Int32)"** %"$$p_2_gep_73"
  %"$p_2" = alloca %"List_Option_(Int32)"*
  store %"List_Option_(Int32)"* %"$$p_2_load_74", %"List_Option_(Int32)"** %"$p_2"
  %"$$p_2_86" = load %"List_Option_(Int32)"*, %"List_Option_(Int32)"** %"$p_2"
  %"$$p_2_tag_87" = getelementptr inbounds %"List_Option_(Int32)", %"List_Option_(Int32)"* %"$$p_2_86", i32 0, i32 0
  %"$$p_2_tag_88" = load i8, i8* %"$$p_2_tag_87"
  switch i8 %"$$p_2_tag_88", label %"$empty_default_89" [
    i8 0, label %"$Cons_90"
    i8 1, label %"$Nil_104"
  ]

"$Cons_90":                                       ; preds = %"$Cons_69"
  %"$$p_2_91" = bitcast %"List_Option_(Int32)"* %"$$p_2_86" to %"Cons_Option_(Int32)"*
  %"$$$p_2_5_gep_92" = getelementptr inbounds %"Cons_Option_(Int32)", %"Cons_Option_(Int32)"* %"$$p_2_91", i32 0, i32 1
  %"$$$p_2_5_load_93" = load %Option_Int32*, %Option_Int32** %"$$$p_2_5_gep_92"
  %"$$p_2_5" = alloca %Option_Int32*
  store %Option_Int32* %"$$$p_2_5_load_93", %Option_Int32** %"$$p_2_5"
  %"$$$p_2_6_gep_94" = getelementptr inbounds %"Cons_Option_(Int32)", %"Cons_Option_(Int32)"* %"$$p_2_91", i32 0, i32 2
  %"$$$p_2_6_load_95" = load %"List_Option_(Int32)"*, %"List_Option_(Int32)"** %"$$$p_2_6_gep_94"
  %"$$p_2_6" = alloca %"List_Option_(Int32)"*
  store %"List_Option_(Int32)"* %"$$$p_2_6_load_95", %"List_Option_(Int32)"** %"$$p_2_6"
  %"$$$p_2_6_97" = load %"List_Option_(Int32)"*, %"List_Option_(Int32)"** %"$$p_2_6"
  %"$$$p_2_6_tag_98" = getelementptr inbounds %"List_Option_(Int32)", %"List_Option_(Int32)"* %"$$$p_2_6_97", i32 0, i32 0
  %"$$$p_2_6_tag_99" = load i8, i8* %"$$$p_2_6_tag_98"
  switch i8 %"$$$p_2_6_tag_99", label %"$default_100" [
    i8 1, label %"$Nil_101"
  ]

"$Nil_101":                                       ; preds = %"$Cons_90"
  %"$$$p_2_6_102" = bitcast %"List_Option_(Int32)"* %"$$$p_2_6_97" to %"Nil_Option_(Int32)"*
  %"$y_103" = load %_Int32, %_Int32* %y
  store %_Int32 %"$y_103", %_Int32* %"$retval_9"
  br label %"$matchsucc_96"

"$default_100":                                   ; preds = %"$Cons_90"
  br label %"$joinp_3"

"$matchsucc_96":                                  ; preds = %"$Nil_101"
  br label %"$matchsucc_75"

"$Nil_104":                                       ; preds = %"$Cons_69"
  %"$$p_2_105" = bitcast %"List_Option_(Int32)"* %"$$p_2_86" to %"Nil_Option_(Int32)"*
  %"$z_106" = load %_Int32, %_Int32* %z
  store %_Int32 %"$z_106", %_Int32* %"$retval_9"
  br label %"$matchsucc_75"

"$empty_default_89":                              ; preds = %"$Cons_69"
  br label %"$matchsucc_75"

"$joinp_3":                                       ; preds = %"$default_100"
  %"$$p_1_77" = load %Option_Int32*, %Option_Int32** %"$p_1"
  %"$$p_1_tag_78" = getelementptr inbounds %Option_Int32, %Option_Int32* %"$$p_1_77", i32 0, i32 0
  %"$$p_1_tag_79" = load i8, i8* %"$$p_1_tag_78"
  switch i8 %"$$p_1_tag_79", label %"$default_80" [
    i8 0, label %"$Some_81"
  ]

"$Some_81":                                       ; preds = %"$joinp_3"
  %"$$p_1_82" = bitcast %Option_Int32* %"$$p_1_77" to %Some_Int32*
  %"$$$p_1_4_gep_83" = getelementptr inbounds %Some_Int32, %Some_Int32* %"$$p_1_82", i32 0, i32 1
  %"$$$p_1_4_load_84" = load %_Int32, %_Int32* %"$$$p_1_4_gep_83"
  %"$$p_1_4" = alloca %_Int32
  store %_Int32 %"$$$p_1_4_load_84", %_Int32* %"$$p_1_4"
  %"$v_85" = load %_Int32, %_Int32* %v
  store %_Int32 %"$v_85", %_Int32* %"$retval_9"
  br label %"$matchsucc_76"

"$default_80":                                    ; preds = %"$joinp_3"
  br label %"$joinp_0"

"$matchsucc_76":                                  ; preds = %"$Some_81"
  br label %"$matchsucc_75"

"$matchsucc_75":                                  ; preds = %"$Nil_104", %"$matchsucc_96", %"$empty_default_89", %"$matchsucc_76"
  br label %"$matchsucc_64"

"$default_68":                                    ; preds = %entry
  br label %"$joinp_0"

"$joinp_0":                                       ; preds = %"$default_80", %"$default_68"
  %"$z_65" = load %_Int32, %_Int32* %z
  store %_Int32 %"$z_65", %_Int32* %"$retval_9"
  br label %"$matchsucc_64"

"$matchsucc_64":                                  ; preds = %"$matchsucc_75", %"$joinp_0"
  %"$$retval_9_107" = load %_Int32, %_Int32* %"$retval_9"
  ret %_Int32 %"$$retval_9_107"
}

define { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* } @"$scilla_expr_108"(i8*) {
entry:
  %"$expr_7" = alloca { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* }
  %z = alloca %_Int32
  store %_Int32 { i32 1 }, %_Int32* %z
  %y = alloca %_Int32
  store %_Int32 { i32 2 }, %_Int32* %y
  %v = alloca %_Int32
  store %_Int32 { i32 3 }, %_Int32* %v
  %f = alloca { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* }
  %malloccall = tail call i8* @malloc(i32 trunc (i64 mul nuw (i64 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i64), i64 3) to i32))
  %"$$fundef_8_envp_109" = bitcast i8* %malloccall to %"$$fundef_8_env_57"*
  %"$$fundef_8_env_voidp_111" = bitcast %"$$fundef_8_env_57"* %"$$fundef_8_envp_109" to i8*
  %"$$fundef_8_cloval_112" = insertvalue { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* } { %_Int32 (i8*, %"List_Option_(Int32)"*)* bitcast (%_Int32 (%"$$fundef_8_env_57"*, %"List_Option_(Int32)"*)* @"$fundef_8" to %_Int32 (i8*, %"List_Option_(Int32)"*)*), i8* undef }, i8* %"$$fundef_8_env_voidp_111", 1
  %"$$fundef_8_envp_113" = extractvalue { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* } %"$$fundef_8_cloval_112", 1
  %"$$fundef_8_envp_114" = bitcast i8* %"$$fundef_8_envp_113" to %"$$fundef_8_env_57"*
  %"$$fundef_8_env_v_115" = getelementptr inbounds %"$$fundef_8_env_57", %"$$fundef_8_env_57"* %"$$fundef_8_envp_114", i32 0, i32 0
  %"$v_116" = load %_Int32, %_Int32* %v
  store %_Int32 %"$v_116", %_Int32* %"$$fundef_8_env_v_115"
  %"$$fundef_8_envp_117" = extractvalue { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* } %"$$fundef_8_cloval_112", 1
  %"$$fundef_8_envp_118" = bitcast i8* %"$$fundef_8_envp_117" to %"$$fundef_8_env_57"*
  %"$$fundef_8_env_y_119" = getelementptr inbounds %"$$fundef_8_env_57", %"$$fundef_8_env_57"* %"$$fundef_8_envp_118", i32 0, i32 1
  %"$y_120" = load %_Int32, %_Int32* %y
  store %_Int32 %"$y_120", %_Int32* %"$$fundef_8_env_y_119"
  %"$$fundef_8_envp_121" = extractvalue { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* } %"$$fundef_8_cloval_112", 1
  %"$$fundef_8_envp_122" = bitcast i8* %"$$fundef_8_envp_121" to %"$$fundef_8_env_57"*
  %"$$fundef_8_env_z_123" = getelementptr inbounds %"$$fundef_8_env_57", %"$$fundef_8_env_57"* %"$$fundef_8_envp_122", i32 0, i32 2
  %"$z_124" = load %_Int32, %_Int32* %z
  store %_Int32 %"$z_124", %_Int32* %"$$fundef_8_env_z_123"
  store { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* } %"$$fundef_8_cloval_112", { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* }* %f
  %"$f_125" = load { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* }, { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* }* %f
  store { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* } %"$f_125", { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* }* %"$expr_7"
  %"$$expr_7_126" = load { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* }, { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* }* %"$expr_7"
  ret { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* } %"$$expr_7_126"
}

declare noalias i8* @malloc(i32)

declare void @_print_scilla_val(%_TyDescrTy_Typ*, i8*)

define void @scilla_main() {
entry:
  %"$cloval_127" = call { %_Int32 (i8*, %"List_Option_(Int32)"*)*, i8* } @"$scilla_expr_108"(i8* null)
  ret void
}

