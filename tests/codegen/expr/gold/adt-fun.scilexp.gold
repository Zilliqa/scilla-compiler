Closure converted AST:
fundef ($fundef_2 : [Int32] -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  decl ($retval_3 : List (Int32))
  decl (n : List (Int32))
  (n : List (Int32)) = Nil { Int32 }
  ($retval_3 : List (Int32)) = Cons { Int32 }(a : Int32) (n : List (Int32))
  ret ($retval_3 : List (Int32))

expr_body:
  decl ($expr_1 : List (Int32))
  decl (f : [Int32] -> List (Int32))
  (f : [Int32] -> List (Int32)) = [($fundef_2 : [Int32] -> List (Int32))]
  decl (i : Int32)
  (i : Int32) = (Int32 0)
  decl ($f_0 : List (Int32))
  ($f_0 : List (Int32)) = (f : [Int32] -> List (Int32)) (i : Int32)
  ($expr_1 : List (Int32)) = ($f_0 : List (Int32))
  ret ($expr_1 : List (Int32))

Specialized types:
ADTs:
List:
  Int32
Maps:
  
ByStrX: 

LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"$TyDescrTy_PrimTyp_4" = type { i32, i32 }
%_TyDescrTy_Typ = type { i32, i8* }
%"$TyDescrTy_ADTTyp_26" = type { { i8*, i32 }, i32, i32, %"$TyDescrTy_ADTTyp_Specl_25"** }
%"$TyDescrTy_ADTTyp_Specl_25" = type { i32, %_TyDescrTy_Typ**, %"$TyDescrTy_ADTTyp_Constr_27"**, %"$TyDescrTy_ADTTyp_26"* }
%"$TyDescrTy_ADTTyp_Constr_27" = type { { i8*, i32 }, i32, %_TyDescrTy_Typ** }
%TyDescrString = type { i8*, i32 }
%List_Int32 = type { i8, %Cons_Int32*, %Nil_Int32* }
%Cons_Int32 = type <{ i8, %_Int32, %List_Int32* }>
%Nil_Int32 = type <{ i8 }>
%"$$fundef_2_env_40" = type {}
%_Int32 = type { i32 }

@"$TyDescr_Int32_Prim_5" = global %"$TyDescrTy_PrimTyp_4" zeroinitializer
@"$TyDescr_Int32_6" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Int32_Prim_5" }
@"$TyDescr_Uint32_Prim_7" = global %"$TyDescrTy_PrimTyp_4" { i32 1, i32 0 }
@"$TyDescr_Uint32_8" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Uint32_Prim_7" }
@"$TyDescr_Int64_Prim_9" = global %"$TyDescrTy_PrimTyp_4" { i32 0, i32 1 }
@"$TyDescr_Int64_10" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Int64_Prim_9" }
@"$TyDescr_Uint64_Prim_11" = global %"$TyDescrTy_PrimTyp_4" { i32 1, i32 1 }
@"$TyDescr_Uint64_12" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Uint64_Prim_11" }
@"$TyDescr_Int128_Prim_13" = global %"$TyDescrTy_PrimTyp_4" { i32 0, i32 2 }
@"$TyDescr_Int128_14" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Int128_Prim_13" }
@"$TyDescr_Uint128_Prim_15" = global %"$TyDescrTy_PrimTyp_4" { i32 1, i32 2 }
@"$TyDescr_Uint128_16" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Uint128_Prim_15" }
@"$TyDescr_Int256_Prim_17" = global %"$TyDescrTy_PrimTyp_4" { i32 0, i32 3 }
@"$TyDescr_Int256_18" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Int256_Prim_17" }
@"$TyDescr_Uint256_Prim_19" = global %"$TyDescrTy_PrimTyp_4" { i32 1, i32 3 }
@"$TyDescr_Uint256_20" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Uint256_Prim_19" }
@"$TyDescr_String_Prim_21" = global %"$TyDescrTy_PrimTyp_4" { i32 2, i32 0 }
@"$TyDescr_String_22" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_String_Prim_21" }
@"$TyDescr_Bystr_Prim_23" = global %"$TyDescrTy_PrimTyp_4" { i32 7, i32 0 }
@"$TyDescr_Bystr_24" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Bystr_Prim_23" }
@"$TyDescr_ADT_List_Int32_28" = unnamed_addr constant %_TyDescrTy_Typ { i32 1, %"$TyDescrTy_ADTTyp_Specl_25"* @"$TyDescr_List_Int32_ADTTyp_Specl_37" }
@"$TyDescr_List_ADTTyp_30" = unnamed_addr constant %"$TyDescrTy_ADTTyp_26" { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_List_39", i32 0, i32 0), i32 4 }, i32 2, i32 1, %"$TyDescrTy_ADTTyp_Specl_25"** getelementptr inbounds ([1 x %"$TyDescrTy_ADTTyp_Specl_25"*], [1 x %"$TyDescrTy_ADTTyp_Specl_25"*]* @"$TyDescr_List_ADTTyp_m_specls_38", i32 0, i32 0) }
@"$TyDescr_List_Cons_Int32_Constr_m_args_31" = unnamed_addr constant [2 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_Int32_6", %_TyDescrTy_Typ* @"$TyDescr_ADT_List_Int32_28"]
@"$TyDescr_ADT_Cons_32" = unnamed_addr constant [4 x i8] c"Cons"
@"$TyDescr_List_Nil_Int32_Constr_m_args_33" = unnamed_addr constant [0 x %_TyDescrTy_Typ*] zeroinitializer
@"$TyDescr_ADT_Nil_34" = unnamed_addr constant [3 x i8] c"Nil"
@"$TyDescr_List_Int32_ADTTyp_Specl_m_constrs_35" = unnamed_addr constant [2 x %"$TyDescrTy_ADTTyp_Constr_27"*] [%"$TyDescrTy_ADTTyp_Constr_27"* { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_Cons_32", i32 0, i32 0), i32 4 }, i32 2, %_TyDescrTy_Typ** getelementptr inbounds ([2 x %_TyDescrTy_Typ*], [2 x %_TyDescrTy_Typ*]* @"$TyDescr_List_Cons_Int32_Constr_m_args_31", i32 0, i32 0) }, %"$TyDescrTy_ADTTyp_Constr_27"* { %TyDescrString { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"$TyDescr_ADT_Nil_34", i32 0, i32 0), i32 3 }, i32 0, %_TyDescrTy_Typ** getelementptr inbounds ([0 x %_TyDescrTy_Typ*], [0 x %_TyDescrTy_Typ*]* @"$TyDescr_List_Nil_Int32_Constr_m_args_33", i32 0, i32 0) }]
@"$TyDescr_List_Int32_ADTTyp_Specl_m_TArgs_36" = unnamed_addr constant [1 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_Int32_6"]
@"$TyDescr_List_Int32_ADTTyp_Specl_37" = unnamed_addr constant %"$TyDescrTy_ADTTyp_Specl_25" { i32 1, %_TyDescrTy_Typ** getelementptr inbounds ([1 x %_TyDescrTy_Typ*], [1 x %_TyDescrTy_Typ*]* @"$TyDescr_List_Int32_ADTTyp_Specl_m_TArgs_36", i32 0, i32 0), %"$TyDescrTy_ADTTyp_Constr_27"** getelementptr inbounds ([2 x %"$TyDescrTy_ADTTyp_Constr_27"*], [2 x %"$TyDescrTy_ADTTyp_Constr_27"*]* @"$TyDescr_List_Int32_ADTTyp_Specl_m_constrs_35", i32 0, i32 0), %"$TyDescrTy_ADTTyp_26"* @"$TyDescr_List_ADTTyp_30" }
@"$TyDescr_List_ADTTyp_m_specls_38" = unnamed_addr constant [1 x %"$TyDescrTy_ADTTyp_Specl_25"*] [%"$TyDescrTy_ADTTyp_Specl_25"* @"$TyDescr_List_Int32_ADTTyp_Specl_37"]
@"$TyDescr_ADT_List_39" = unnamed_addr constant [4 x i8] c"List"

define %List_Int32* @"$fundef_2"(%"$$fundef_2_env_40"*, %_Int32) {
entry:
  %"$retval_3" = alloca %List_Int32*
  %n = alloca %List_Int32*
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Nil_Int32* getelementptr (%Nil_Int32, %Nil_Int32* null, i32 1) to i32))
  %"$adtval_41" = bitcast i8* %malloccall to %Nil_Int32*
  %"$adtgep_42" = getelementptr inbounds %Nil_Int32, %Nil_Int32* %"$adtval_41", i32 0, i32 0
  store i8 1, i8* %"$adtgep_42"
  %"$adtptr_43" = bitcast %Nil_Int32* %"$adtval_41" to %List_Int32*
  store %List_Int32* %"$adtptr_43", %List_Int32** %n
  %"$n_44" = load %List_Int32*, %List_Int32** %n
  %malloccall1 = tail call i8* @malloc(i32 ptrtoint (%Cons_Int32* getelementptr (%Cons_Int32, %Cons_Int32* null, i32 1) to i32))
  %"$adtval_45" = bitcast i8* %malloccall1 to %Cons_Int32*
  %"$adtgep_46" = getelementptr inbounds %Cons_Int32, %Cons_Int32* %"$adtval_45", i32 0, i32 0
  store i8 0, i8* %"$adtgep_46"
  %"$adtgep_47" = getelementptr inbounds %Cons_Int32, %Cons_Int32* %"$adtval_45", i32 0, i32 1
  store %_Int32 %1, %_Int32* %"$adtgep_47"
  %"$adtgep_48" = getelementptr inbounds %Cons_Int32, %Cons_Int32* %"$adtval_45", i32 0, i32 2
  store %List_Int32* %"$n_44", %List_Int32** %"$adtgep_48"
  %"$adtptr_49" = bitcast %Cons_Int32* %"$adtval_45" to %List_Int32*
  store %List_Int32* %"$adtptr_49", %List_Int32** %"$retval_3"
  %"$$retval_3_50" = load %List_Int32*, %List_Int32** %"$retval_3"
  ret %List_Int32* %"$$retval_3_50"
}

declare noalias i8* @malloc(i32)

define %List_Int32* @"$scilla_expr_51"(i8*) {
entry:
  %"$expr_1" = alloca %List_Int32*
  %f = alloca { %List_Int32* (i8*, %_Int32)*, i8* }
  store { %List_Int32* (i8*, %_Int32)*, i8* } { %List_Int32* (i8*, %_Int32)* bitcast (%List_Int32* (%"$$fundef_2_env_40"*, %_Int32)* @"$fundef_2" to %List_Int32* (i8*, %_Int32)*), i8* null }, { %List_Int32* (i8*, %_Int32)*, i8* }* %f
  %i = alloca %_Int32
  store %_Int32 zeroinitializer, %_Int32* %i
  %"$f_0" = alloca %List_Int32*
  %"$f_55" = load { %List_Int32* (i8*, %_Int32)*, i8* }, { %List_Int32* (i8*, %_Int32)*, i8* }* %f
  %"$f_fptr_56" = extractvalue { %List_Int32* (i8*, %_Int32)*, i8* } %"$f_55", 0
  %"$f_envptr_57" = extractvalue { %List_Int32* (i8*, %_Int32)*, i8* } %"$f_55", 1
  %"$i_58" = load %_Int32, %_Int32* %i
  %"$f_call_59" = call %List_Int32* %"$f_fptr_56"(i8* %"$f_envptr_57", %_Int32 %"$i_58")
  store %List_Int32* %"$f_call_59", %List_Int32** %"$f_0"
  %"$$f_0_60" = load %List_Int32*, %List_Int32** %"$f_0"
  store %List_Int32* %"$$f_0_60", %List_Int32** %"$expr_1"
  %"$$expr_1_61" = load %List_Int32*, %List_Int32** %"$expr_1"
  ret %List_Int32* %"$$expr_1_61"
}

declare void @_print_scilla_val(%_TyDescrTy_Typ*, i8*)

define void @scilla_main() {
entry:
  %"$exprval_62" = call %List_Int32* @"$scilla_expr_51"(i8* null)
  %"$memvoidcast_63" = bitcast %List_Int32* %"$exprval_62" to i8*
  call void @_print_scilla_val(%_TyDescrTy_Typ* @"$TyDescr_ADT_List_Int32_28", i8* %"$memvoidcast_63")
  ret void
}

