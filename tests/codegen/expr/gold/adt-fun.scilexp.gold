Closure converted AST:
fundef ($fundef_2 : [Int32] -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  decl ($retval_3 : List (Int32))
  decl (n : List (Int32))
  (n : List (Int32)) = Nil { Int32 }
  ($retval_3 : List (Int32)) = Cons { Int32 }(a : Int32) (n : List (Int32))
  ret ($retval_3 : List (Int32))

expr_body:
  decl ($expr_1 : List (Int32))
  decl (f : [Int32] -> List (Int32))
  (f : [Int32] -> List (Int32)) = [($fundef_2 : [Int32] -> List (Int32))]
  decl (i : Int32)
  (i : Int32) = (Int32 0)
  decl ($f_0 : List (Int32))
  ($f_0 : List (Int32)) = (f : [Int32] -> List (Int32)) (i : Int32)
  ($expr_1 : List (Int32)) = ($f_0 : List (Int32))
  ret ($expr_1 : List (Int32))

Specialized types:
ADTs:
List:
  Int32
Maps:
  
ByStrX: 

LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"$TyDescrTy_PrimTyp_4" = type { i32, i32 }
%"$TyDescrTy_Typ_5" = type { i32, void* }
%"$TyDescrTy_ADTTyp_27" = type { { i8*, i32 }, i32, i32, %"$TyDescrTy_ADTTyp_Specl_26"** }
%"$TyDescrTy_ADTTyp_Specl_26" = type { i32, %"$TyDescrTy_Typ_5"**, %"$TyDescrTy_ADTTyp_Constr_28"**, %"$TyDescrTy_ADTTyp_27"* }
%"$TyDescrTy_ADTTyp_Constr_28" = type { { i8*, i32 }, i32, %"$TyDescrTy_Typ_5"** }
%TyDescrString = type { i8*, i32 }
%List_Int32 = type { i8, %Cons_Int32*, %Nil_Int32* }
%Cons_Int32 = type <{ i8, %Int32, %List_Int32* }>
%Nil_Int32 = type <{ i8 }>
%"$$fundef_2_env_41" = type {}
%Int32 = type { i32 }

@"$TyDescr_Int32_Prim_6" = global %"$TyDescrTy_PrimTyp_4" zeroinitializer
@"$TyDescr_Int32_7" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Int32_Prim_6" }
@"$TyDescr_Uint32_Prim_8" = global %"$TyDescrTy_PrimTyp_4" { i32 1, i32 0 }
@"$TyDescr_Uint32_9" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Uint32_Prim_8" }
@"$TyDescr_Int64_Prim_10" = global %"$TyDescrTy_PrimTyp_4" { i32 0, i32 1 }
@"$TyDescr_Int64_11" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Int64_Prim_10" }
@"$TyDescr_Uint64_Prim_12" = global %"$TyDescrTy_PrimTyp_4" { i32 1, i32 1 }
@"$TyDescr_Uint64_13" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Uint64_Prim_12" }
@"$TyDescr_Int128_Prim_14" = global %"$TyDescrTy_PrimTyp_4" { i32 0, i32 2 }
@"$TyDescr_Int128_15" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Int128_Prim_14" }
@"$TyDescr_Uint128_Prim_16" = global %"$TyDescrTy_PrimTyp_4" { i32 1, i32 2 }
@"$TyDescr_Uint128_17" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Uint128_Prim_16" }
@"$TyDescr_Int256_Prim_18" = global %"$TyDescrTy_PrimTyp_4" { i32 0, i32 3 }
@"$TyDescr_Int256_19" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Int256_Prim_18" }
@"$TyDescr_Uint256_Prim_20" = global %"$TyDescrTy_PrimTyp_4" { i32 1, i32 3 }
@"$TyDescr_Uint256_21" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Uint256_Prim_20" }
@"$TyDescr_String_Prim_22" = global %"$TyDescrTy_PrimTyp_4" { i32 2, i32 0 }
@"$TyDescr_String_23" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_String_Prim_22" }
@"$TyDescr_Bystr_Prim_24" = global %"$TyDescrTy_PrimTyp_4" { i32 7, i32 0 }
@"$TyDescr_Bystr_25" = global %"$TyDescrTy_Typ_5" { i32 0, %"$TyDescrTy_PrimTyp_4"* @"$TyDescr_Bystr_Prim_24" }
@"$TyDescr_ADT_List_Int32_29" = unnamed_addr constant %"$TyDescrTy_Typ_5" { i32 1, %"$TyDescrTy_ADTTyp_Specl_26"* @"$TyDescr_List_Int32_ADTTyp_Specl_38" }
@"$TyDescr_List_ADTTyp_31" = unnamed_addr constant %"$TyDescrTy_ADTTyp_27" { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_List_40", i32 0, i32 0), i32 4 }, i32 2, i32 1, %"$TyDescrTy_ADTTyp_Specl_26"** getelementptr inbounds ([1 x %"$TyDescrTy_ADTTyp_Specl_26"*], [1 x %"$TyDescrTy_ADTTyp_Specl_26"*]* @"$TyDescr_List_ADTTyp_m_specls_39", i32 0, i32 0) }
@"$TyDescr_List_Cons_Int32_Constr_m_args_32" = unnamed_addr constant [2 x %"$TyDescrTy_Typ_5"*] [%"$TyDescrTy_Typ_5"* @"$TyDescr_Int32_7", %"$TyDescrTy_Typ_5"* @"$TyDescr_ADT_List_Int32_29"]
@"$TyDescr_ADT_Cons_33" = unnamed_addr constant [4 x i8] c"Cons"
@"$TyDescr_List_Nil_Int32_Constr_m_args_34" = unnamed_addr constant [0 x %"$TyDescrTy_Typ_5"*] zeroinitializer
@"$TyDescr_ADT_Nil_35" = unnamed_addr constant [3 x i8] c"Nil"
@"$TyDescr_List_Int32_ADTTyp_Specl_m_constrs_36" = unnamed_addr constant [2 x %"$TyDescrTy_ADTTyp_Constr_28"*] [%"$TyDescrTy_ADTTyp_Constr_28"* { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_Cons_33", i32 0, i32 0), i32 4 }, i32 2, %"$TyDescrTy_Typ_5"** getelementptr inbounds ([2 x %"$TyDescrTy_Typ_5"*], [2 x %"$TyDescrTy_Typ_5"*]* @"$TyDescr_List_Cons_Int32_Constr_m_args_32", i32 0, i32 0) }, %"$TyDescrTy_ADTTyp_Constr_28"* { %TyDescrString { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"$TyDescr_ADT_Nil_35", i32 0, i32 0), i32 3 }, i32 0, %"$TyDescrTy_Typ_5"** getelementptr inbounds ([0 x %"$TyDescrTy_Typ_5"*], [0 x %"$TyDescrTy_Typ_5"*]* @"$TyDescr_List_Nil_Int32_Constr_m_args_34", i32 0, i32 0) }]
@"$TyDescr_List_Int32_ADTTyp_Specl_m_TArgs_37" = unnamed_addr constant [1 x %"$TyDescrTy_Typ_5"*] [%"$TyDescrTy_Typ_5"* @"$TyDescr_Int32_7"]
@"$TyDescr_List_Int32_ADTTyp_Specl_38" = unnamed_addr constant %"$TyDescrTy_ADTTyp_Specl_26" { i32 1, %"$TyDescrTy_Typ_5"** getelementptr inbounds ([1 x %"$TyDescrTy_Typ_5"*], [1 x %"$TyDescrTy_Typ_5"*]* @"$TyDescr_List_Int32_ADTTyp_Specl_m_TArgs_37", i32 0, i32 0), %"$TyDescrTy_ADTTyp_Constr_28"** getelementptr inbounds ([2 x %"$TyDescrTy_ADTTyp_Constr_28"*], [2 x %"$TyDescrTy_ADTTyp_Constr_28"*]* @"$TyDescr_List_Int32_ADTTyp_Specl_m_constrs_36", i32 0, i32 0), %"$TyDescrTy_ADTTyp_27"* @"$TyDescr_List_ADTTyp_31" }
@"$TyDescr_List_ADTTyp_m_specls_39" = unnamed_addr constant [1 x %"$TyDescrTy_ADTTyp_Specl_26"*] [%"$TyDescrTy_ADTTyp_Specl_26"* @"$TyDescr_List_Int32_ADTTyp_Specl_38"]
@"$TyDescr_ADT_List_40" = unnamed_addr constant [4 x i8] c"List"

define %List_Int32* @"$fundef_2"(%"$$fundef_2_env_41"*, %Int32) {
entry:
  %"$retval_3" = alloca %List_Int32*
  %n = alloca %List_Int32*
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Nil_Int32* getelementptr (%Nil_Int32, %Nil_Int32* null, i32 1) to i32))
  %"$adtval_42" = bitcast i8* %malloccall to %Nil_Int32*
  %"$adtgep_43" = getelementptr inbounds %Nil_Int32, %Nil_Int32* %"$adtval_42", i32 0, i32 0
  store i8 1, i8* %"$adtgep_43"
  %"$adtptr_44" = bitcast %Nil_Int32* %"$adtval_42" to %List_Int32*
  store %List_Int32* %"$adtptr_44", %List_Int32** %n
  %"$n_45" = load %List_Int32*, %List_Int32** %n
  %malloccall1 = tail call i8* @malloc(i32 ptrtoint (%Cons_Int32* getelementptr (%Cons_Int32, %Cons_Int32* null, i32 1) to i32))
  %"$adtval_46" = bitcast i8* %malloccall1 to %Cons_Int32*
  %"$adtgep_47" = getelementptr inbounds %Cons_Int32, %Cons_Int32* %"$adtval_46", i32 0, i32 0
  store i8 0, i8* %"$adtgep_47"
  %"$adtgep_48" = getelementptr inbounds %Cons_Int32, %Cons_Int32* %"$adtval_46", i32 0, i32 1
  store %Int32 %1, %Int32* %"$adtgep_48"
  %"$adtgep_49" = getelementptr inbounds %Cons_Int32, %Cons_Int32* %"$adtval_46", i32 0, i32 2
  store %List_Int32* %"$n_45", %List_Int32** %"$adtgep_49"
  %"$adtptr_50" = bitcast %Cons_Int32* %"$adtval_46" to %List_Int32*
  store %List_Int32* %"$adtptr_50", %List_Int32** %"$retval_3"
  %"$$retval_3_51" = load %List_Int32*, %List_Int32** %"$retval_3"
  ret %List_Int32* %"$$retval_3_51"
}

declare noalias i8* @malloc(i32)

define %List_Int32* @"$scilla_expr_52"(void*) {
entry:
  %"$expr_1" = alloca %List_Int32*
  %f = alloca { %List_Int32* (void*, %Int32)*, void* }
  store { %List_Int32* (void*, %Int32)*, void* } { %List_Int32* (void*, %Int32)* bitcast (%List_Int32* (%"$$fundef_2_env_41"*, %Int32)* @"$fundef_2" to %List_Int32* (void*, %Int32)*), void* null }, { %List_Int32* (void*, %Int32)*, void* }* %f
  %i = alloca %Int32
  store %Int32 zeroinitializer, %Int32* %i
  %"$f_0" = alloca %List_Int32*
  %"$f_56" = load { %List_Int32* (void*, %Int32)*, void* }, { %List_Int32* (void*, %Int32)*, void* }* %f
  %"$f_fptr_57" = extractvalue { %List_Int32* (void*, %Int32)*, void* } %"$f_56", 0
  %"$f_envptr_58" = extractvalue { %List_Int32* (void*, %Int32)*, void* } %"$f_56", 1
  %"$i_59" = load %Int32, %Int32* %i
  %"$f_call_60" = call %List_Int32* %"$f_fptr_57"(void* %"$f_envptr_58", %Int32 %"$i_59")
  store %List_Int32* %"$f_call_60", %List_Int32** %"$f_0"
  %"$$f_0_61" = load %List_Int32*, %List_Int32** %"$f_0"
  store %List_Int32* %"$$f_0_61", %List_Int32** %"$expr_1"
  %"$$expr_1_62" = load %List_Int32*, %List_Int32** %"$expr_1"
  ret %List_Int32* %"$$expr_1_62"
}

