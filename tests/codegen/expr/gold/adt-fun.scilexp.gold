Closure converted AST:
fundef ($fundef_2 : [Int32] -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  decl ($retval_3 : List (Int32))
  decl (n : List (Int32))
  (n : List (Int32)) = Nil { Int32 }
  ($retval_3 : List (Int32)) = Cons { Int32 }(a : Int32) (n : List (Int32))
  ret ($retval_3 : List (Int32))

expr_body:
  decl ($expr_1 : List (Int32))
  decl (f : [Int32] -> List (Int32))
  (f : [Int32] -> List (Int32)) = [($fundef_2 : [Int32] -> List (Int32))]
  decl (i : Int32)
  (i : Int32) = (Int32 0)
  decl ($f_0 : List (Int32))
  ($f_0 : List (Int32)) = (f : [Int32] -> List (Int32)) (i : Int32)
  ($expr_1 : List (Int32)) = ($f_0 : List (Int32))
  ret ($expr_1 : List (Int32))

Type specialized ADTs/Maps:
ADTs:
List:
  Int32
Maps:
  

LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%List_Int32 = type { i8, %Cons_Int32*, %Nil_Int32* }
%Cons_Int32 = type <{ i8, %Int32, %List_Int32* }>
%Nil_Int32 = type <{ i8 }>
%"$$fundef_2_env_4" = type {}
%Int32 = type { i32 }

define %List_Int32* @"$fundef_2"(%"$$fundef_2_env_4"*, %Int32) {
entry:
  %"$retval_3" = alloca %List_Int32*
  %n = alloca %List_Int32*
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Nil_Int32* getelementptr (%Nil_Int32, %Nil_Int32* null, i32 1) to i32))
  %"$adtval_5" = bitcast i8* %malloccall to %Nil_Int32*
  %"$adtgep_6" = getelementptr inbounds %Nil_Int32, %Nil_Int32* %"$adtval_5", i32 0, i32 0
  store i8 1, i8* %"$adtgep_6"
  %"$adtptr_7" = bitcast %Nil_Int32* %"$adtval_5" to %List_Int32*
  store %List_Int32* %"$adtptr_7", %List_Int32** %n
  %"$n_8" = load %List_Int32*, %List_Int32** %n
  %malloccall1 = tail call i8* @malloc(i32 ptrtoint (%Cons_Int32* getelementptr (%Cons_Int32, %Cons_Int32* null, i32 1) to i32))
  %"$adtval_9" = bitcast i8* %malloccall1 to %Cons_Int32*
  %"$adtgep_10" = getelementptr inbounds %Cons_Int32, %Cons_Int32* %"$adtval_9", i32 0, i32 0
  store i8 0, i8* %"$adtgep_10"
  %"$adtgep_11" = getelementptr inbounds %Cons_Int32, %Cons_Int32* %"$adtval_9", i32 0, i32 1
  store %Int32 %1, %Int32* %"$adtgep_11"
  %"$adtgep_12" = getelementptr inbounds %Cons_Int32, %Cons_Int32* %"$adtval_9", i32 0, i32 2
  store %List_Int32* %"$n_8", %List_Int32** %"$adtgep_12"
  %"$adtptr_13" = bitcast %Cons_Int32* %"$adtval_9" to %List_Int32*
  store %List_Int32* %"$adtptr_13", %List_Int32** %"$retval_3"
  %"$$retval_3_14" = load %List_Int32*, %List_Int32** %"$retval_3"
  ret %List_Int32* %"$$retval_3_14"
}

declare noalias i8* @malloc(i32)

define %List_Int32* @"$scilla_expr_15"(void*) {
entry:
  %"$expr_1" = alloca %List_Int32*
  %f = alloca { %List_Int32* (void*, %Int32)*, void* }
  store { %List_Int32* (void*, %Int32)*, void* } { %List_Int32* (void*, %Int32)* bitcast (%List_Int32* (%"$$fundef_2_env_4"*, %Int32)* @"$fundef_2" to %List_Int32* (void*, %Int32)*), void* null }, { %List_Int32* (void*, %Int32)*, void* }* %f
  %i = alloca %Int32
  store %Int32 zeroinitializer, %Int32* %i
  %"$f_0" = alloca %List_Int32*
  %"$f_19" = load { %List_Int32* (void*, %Int32)*, void* }, { %List_Int32* (void*, %Int32)*, void* }* %f
  %"$f_fptr_20" = extractvalue { %List_Int32* (void*, %Int32)*, void* } %"$f_19", 0
  %"$f_envptr_21" = extractvalue { %List_Int32* (void*, %Int32)*, void* } %"$f_19", 1
  %"$i_22" = load %Int32, %Int32* %i
  %"$f_call_23" = call %List_Int32* %"$f_fptr_20"(void* %"$f_envptr_21", %Int32 %"$i_22")
  store %List_Int32* %"$f_call_23", %List_Int32** %"$f_0"
  %"$$f_0_24" = load %List_Int32*, %List_Int32** %"$f_0"
  store %List_Int32* %"$$f_0_24", %List_Int32** %"$expr_1"
  %"$$expr_1_25" = load %List_Int32*, %List_Int32** %"$expr_1"
  ret %List_Int32* %"$$expr_1_25"
}

