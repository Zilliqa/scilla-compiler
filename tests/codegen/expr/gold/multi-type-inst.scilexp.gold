Instantiating at (codegen/expr/multi-type-inst.scilexp,3,3) with type: Int32
Instantiating at (codegen/expr/multi-type-inst.scilexp,3,3) with type: Int64
Instantiating at (codegen/expr/multi-type-inst.scilexp,10,3) with type: Int32
Instantiating at (codegen/expr/multi-type-inst.scilexp,10,3) with type: Int64
Closure converted AST:
fundef ($fundef_5 : [()] -> ([Int32] -> List (Int32))) ()
environment: ()
body:
  ($retval_6 : [Int32] -> List (Int32)) = [($fundef_7 : [Int32] -> List (Int32))]
  ret ($retval_6 : [Int32] -> List (Int32))

fundef ($fundef_7 : [Int32] -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (an : List (Int32)) = Nil { Int32 }
  ($retval_8 : List (Int32)) = Cons { Int32 }(a : Int32) (an : List (Int32))
  ret ($retval_8 : List (Int32))

fundef ($fundef_9 : [()] -> ([Int64] -> List (Int64))) ()
environment: ()
body:
  ($retval_10 : [Int64] -> List (Int64)) = [($fundef_11 : [Int64] -> List (Int64))]
  ret ($retval_10 : [Int64] -> List (Int64))

fundef ($fundef_11 : [Int64] -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (an : List (Int64)) = Nil { Int64 }
  ($retval_12 : List (Int64)) = Cons { Int64 }(a : Int64) (an : List (Int64))
  ret ($retval_12 : List (Int64))

fundef ($fundef_13 : [()] -> ([Int32] -> List (Int32))) ()
environment: ()
body:
  ($retval_14 : [Int32] -> List (Int32)) = [($fundef_15 : [Int32] -> List (Int32))]
  ret ($retval_14 : [Int32] -> List (Int32))

fundef ($fundef_15 : [Int32] -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (an : List (Int32)) = Nil { Int32 }
  (a1 : List (Int32)) = Cons { Int32 }(a : Int32) (an : List (Int32))
  ($retval_16 : List (Int32)) = Cons { Int32 }(a : Int32) (a1 : List (Int32))
  ret ($retval_16 : List (Int32))

fundef ($fundef_17 : [()] -> ([Int64] -> List (Int64))) ()
environment: ()
body:
  ($retval_18 : [Int64] -> List (Int64)) = [($fundef_19 : [Int64] -> List (Int64))]
  ret ($retval_18 : [Int64] -> List (Int64))

fundef ($fundef_19 : [Int64] -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (an : List (Int64)) = Nil { Int64 }
  (a1 : List (Int64)) = Cons { Int64 }(a : Int64) (an : List (Int64))
  ($retval_20 : List (Int64)) = Cons { Int64 }(a : Int64) (a1 : List (Int64))
  ret ($retval_20 : List (Int64))

expr_body:
  (t1 : forall 'A. ['A] -> List ('A)) = [Int32 -> ($fundef_5 : [()] -> ([Int32] -> List (Int32))); Int64 -> ($fundef_9 : [()] -> ([Int64] -> List (Int64)))]
  (t2 : forall 'A. ['A] -> List ('A)) = [Int32 -> ($fundef_13 : [()] -> ([Int32] -> List (Int32))); Int64 -> ($fundef_17 : [()] -> ([Int64] -> List (Int64)))]
  (some_bool : Bool) = True {  }
  match (some_bool : Bool) with
  | True =>
    (f : forall 'A. ['A] -> List ('A)) = (t1 : forall 'A. ['A] -> List ('A))
  | False =>
    (f : forall 'A. ['A] -> List ('A)) = (t2 : forall 'A. ['A] -> List ('A))
  (some_bool2 : Bool) = False {  }
  match (some_bool2 : Bool) with
  | True =>
    (f1 : [Int32] -> List (Int32)) = (f : forall 'A. ['A] -> List ('A)) Int32
    (len : [List (Int32)] -> Uint32) = (list_length : forall 'A. [List ('A)] -> Uint32) Int32
    (one : Int32) = (Int32 1)
    ($f1_0 : List (Int32)) = (f1 : [Int32] -> List (Int32)) (one : Int32)
    (f1l : List (Int32)) = ($f1_0 : List (Int32))
    ($len_1 : Uint32) = (len : [List (Int32)] -> Uint32) (f1l : List (Int32))
    ($expr_4 : Uint32) = ($len_1 : Uint32)
  | False =>
    (f2 : [Int64] -> List (Int64)) = (f : forall 'A. ['A] -> List ('A)) Int64
    (len : [List (Int64)] -> Uint32) = (list_length : forall 'A. [List ('A)] -> Uint32) Int64
    (one : Int64) = (Int64 1)
    ($f2_2 : List (Int64)) = (f2 : [Int64] -> List (Int64)) (one : Int64)
    (f2l : List (Int64)) = ($f2_2 : List (Int64))
    ($len_3 : Uint32) = (len : [List (Int64)] -> Uint32) (f2l : List (Int64))
    ($expr_4 : Uint32) = ($len_3 : Uint32)
  ret ($expr_4 : Uint32)

:0:0: error: GenLlvm: genllvm_typ: unsupported type
