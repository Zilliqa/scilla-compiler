Closure converted AST:
fundef ($fundef_4 : [Pair (Option (Int32)) (Int32)] -> Int32) ((p : Pair (Option (Int32)) (Int32)) : Pair (Option (Int32)) (Int32))
environment: ()
body:
  decl ($retval_5 : Int32)
  match (p : Pair (Option (Int32)) (Int32)) with
  | Pair ($p_0 : Option (Int32)) ($p_1 : Int32) =>
    match ($p_0 : Option (Int32)) with
    | Some (z : Int32) =>
      ($retval_5 : Int32) = (z : Int32)
    | _ =>
      jump ($joinp_2 : Int32)
    join ($joinp_2 : Int32) =>
      ($retval_5 : Int32) = ($p_1 : Int32)
  ret ($retval_5 : Int32)

expr_body:
  decl ($expr_3 : [Pair (Option (Int32)) (Int32)] -> Int32)
  decl (f : [Pair (Option (Int32)) (Int32)] -> Int32)
  (f : [Pair (Option (Int32)) (Int32)] -> Int32) = [($fundef_4 : [Pair (Option (Int32)) (Int32)] -> Int32)]
  ($expr_3 : [Pair (Option (Int32)) (Int32)] -> Int32) = (f : [Pair (Option (Int32)) (Int32)] -> Int32)
  ret ($expr_3 : [Pair (Option (Int32)) (Int32)] -> Int32)

Specialized types:
ADTs:
Option:
  Int32
Pair:
  Option (Int32) Int32
Maps:
  
ByStrX: 

LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"$TyDescrTy_PrimTyp_6" = type { i32, i32 }
%_TyDescrTy_Typ = type { i32, i8* }
%"$TyDescrTy_ADTTyp_28" = type { { i8*, i32 }, i32, i32, %"$TyDescrTy_ADTTyp_Specl_27"** }
%"$TyDescrTy_ADTTyp_Specl_27" = type { i32, %_TyDescrTy_Typ**, %"$TyDescrTy_ADTTyp_Constr_29"**, %"$TyDescrTy_ADTTyp_28"* }
%"$TyDescrTy_ADTTyp_Constr_29" = type { { i8*, i32 }, i32, %_TyDescrTy_Typ** }
%TyDescrString = type { i8*, i32 }
%_Int32 = type { i32 }
%"$$fundef_4_env_51" = type {}
%"Pair_Option_(Int32)_Int32" = type <{ i8, %Option_Int32*, %_Int32 }>
%Option_Int32 = type { i8, %Some_Int32*, %None_Int32* }
%Some_Int32 = type <{ i8, %_Int32 }>
%None_Int32 = type <{ i8 }>

@"$TyDescr_Int32_Prim_7" = global %"$TyDescrTy_PrimTyp_6" zeroinitializer
@"$TyDescr_Int32_8" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Int32_Prim_7" }
@"$TyDescr_Uint32_Prim_9" = global %"$TyDescrTy_PrimTyp_6" { i32 1, i32 0 }
@"$TyDescr_Uint32_10" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Uint32_Prim_9" }
@"$TyDescr_Int64_Prim_11" = global %"$TyDescrTy_PrimTyp_6" { i32 0, i32 1 }
@"$TyDescr_Int64_12" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Int64_Prim_11" }
@"$TyDescr_Uint64_Prim_13" = global %"$TyDescrTy_PrimTyp_6" { i32 1, i32 1 }
@"$TyDescr_Uint64_14" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Uint64_Prim_13" }
@"$TyDescr_Int128_Prim_15" = global %"$TyDescrTy_PrimTyp_6" { i32 0, i32 2 }
@"$TyDescr_Int128_16" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Int128_Prim_15" }
@"$TyDescr_Uint128_Prim_17" = global %"$TyDescrTy_PrimTyp_6" { i32 1, i32 2 }
@"$TyDescr_Uint128_18" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Uint128_Prim_17" }
@"$TyDescr_Int256_Prim_19" = global %"$TyDescrTy_PrimTyp_6" { i32 0, i32 3 }
@"$TyDescr_Int256_20" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Int256_Prim_19" }
@"$TyDescr_Uint256_Prim_21" = global %"$TyDescrTy_PrimTyp_6" { i32 1, i32 3 }
@"$TyDescr_Uint256_22" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Uint256_Prim_21" }
@"$TyDescr_String_Prim_23" = global %"$TyDescrTy_PrimTyp_6" { i32 2, i32 0 }
@"$TyDescr_String_24" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_String_Prim_23" }
@"$TyDescr_Bystr_Prim_25" = global %"$TyDescrTy_PrimTyp_6" { i32 7, i32 0 }
@"$TyDescr_Bystr_26" = global %_TyDescrTy_Typ { i32 0, %"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Bystr_Prim_25" }
@"$TyDescr_ADT_Option_Int32_30" = unnamed_addr constant %_TyDescrTy_Typ { i32 1, %"$TyDescrTy_ADTTyp_Specl_27"* @"$TyDescr_Option_Int32_ADTTyp_Specl_40" }
@"$TyDescr_ADT_Pair_Option_(Int32)_Int32_31" = unnamed_addr constant %_TyDescrTy_Typ { i32 1, %"$TyDescrTy_ADTTyp_Specl_27"* @"$TyDescr_Pair_Option_(Int32)_Int32_ADTTyp_Specl_48" }
@"$TyDescr_Option_ADTTyp_33" = unnamed_addr constant %"$TyDescrTy_ADTTyp_28" { %TyDescrString { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"$TyDescr_ADT_Option_42", i32 0, i32 0), i32 6 }, i32 2, i32 1, %"$TyDescrTy_ADTTyp_Specl_27"** getelementptr inbounds ([1 x %"$TyDescrTy_ADTTyp_Specl_27"*], [1 x %"$TyDescrTy_ADTTyp_Specl_27"*]* @"$TyDescr_Option_ADTTyp_m_specls_41", i32 0, i32 0) }
@"$TyDescr_Option_Some_Int32_Constr_m_args_34" = unnamed_addr constant [1 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_Int32_8"]
@"$TyDescr_ADT_Some_35" = unnamed_addr constant [4 x i8] c"Some"
@"$TyDescr_Option_None_Int32_Constr_m_args_36" = unnamed_addr constant [0 x %_TyDescrTy_Typ*] zeroinitializer
@"$TyDescr_ADT_None_37" = unnamed_addr constant [4 x i8] c"None"
@"$TyDescr_Option_Int32_ADTTyp_Specl_m_constrs_38" = unnamed_addr constant [2 x %"$TyDescrTy_ADTTyp_Constr_29"*] [%"$TyDescrTy_ADTTyp_Constr_29"* { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_Some_35", i32 0, i32 0), i32 4 }, i32 1, %_TyDescrTy_Typ** getelementptr inbounds ([1 x %_TyDescrTy_Typ*], [1 x %_TyDescrTy_Typ*]* @"$TyDescr_Option_Some_Int32_Constr_m_args_34", i32 0, i32 0) }, %"$TyDescrTy_ADTTyp_Constr_29"* { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_None_37", i32 0, i32 0), i32 4 }, i32 0, %_TyDescrTy_Typ** getelementptr inbounds ([0 x %_TyDescrTy_Typ*], [0 x %_TyDescrTy_Typ*]* @"$TyDescr_Option_None_Int32_Constr_m_args_36", i32 0, i32 0) }]
@"$TyDescr_Option_Int32_ADTTyp_Specl_m_TArgs_39" = unnamed_addr constant [1 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_Int32_8"]
@"$TyDescr_Option_Int32_ADTTyp_Specl_40" = unnamed_addr constant %"$TyDescrTy_ADTTyp_Specl_27" { i32 1, %_TyDescrTy_Typ** getelementptr inbounds ([1 x %_TyDescrTy_Typ*], [1 x %_TyDescrTy_Typ*]* @"$TyDescr_Option_Int32_ADTTyp_Specl_m_TArgs_39", i32 0, i32 0), %"$TyDescrTy_ADTTyp_Constr_29"** getelementptr inbounds ([2 x %"$TyDescrTy_ADTTyp_Constr_29"*], [2 x %"$TyDescrTy_ADTTyp_Constr_29"*]* @"$TyDescr_Option_Int32_ADTTyp_Specl_m_constrs_38", i32 0, i32 0), %"$TyDescrTy_ADTTyp_28"* @"$TyDescr_Option_ADTTyp_33" }
@"$TyDescr_Option_ADTTyp_m_specls_41" = unnamed_addr constant [1 x %"$TyDescrTy_ADTTyp_Specl_27"*] [%"$TyDescrTy_ADTTyp_Specl_27"* @"$TyDescr_Option_Int32_ADTTyp_Specl_40"]
@"$TyDescr_ADT_Option_42" = unnamed_addr constant [6 x i8] c"Option"
@"$TyDescr_Pair_ADTTyp_43" = unnamed_addr constant %"$TyDescrTy_ADTTyp_28" { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_Pair_50", i32 0, i32 0), i32 4 }, i32 1, i32 1, %"$TyDescrTy_ADTTyp_Specl_27"** getelementptr inbounds ([1 x %"$TyDescrTy_ADTTyp_Specl_27"*], [1 x %"$TyDescrTy_ADTTyp_Specl_27"*]* @"$TyDescr_Pair_ADTTyp_m_specls_49", i32 0, i32 0) }
@"$TyDescr_Pair_Pair_Option_(Int32)_Int32_Constr_m_args_44" = unnamed_addr constant [2 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_ADT_Option_Int32_30", %_TyDescrTy_Typ* @"$TyDescr_Int32_8"]
@"$TyDescr_ADT_Pair_45" = unnamed_addr constant [4 x i8] c"Pair"
@"$TyDescr_Pair_Option_(Int32)_Int32_ADTTyp_Specl_m_constrs_46" = unnamed_addr constant [1 x %"$TyDescrTy_ADTTyp_Constr_29"*] [%"$TyDescrTy_ADTTyp_Constr_29"* { %TyDescrString { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"$TyDescr_ADT_Pair_45", i32 0, i32 0), i32 4 }, i32 2, %_TyDescrTy_Typ** getelementptr inbounds ([2 x %_TyDescrTy_Typ*], [2 x %_TyDescrTy_Typ*]* @"$TyDescr_Pair_Pair_Option_(Int32)_Int32_Constr_m_args_44", i32 0, i32 0) }]
@"$TyDescr_Pair_Option_(Int32)_Int32_ADTTyp_Specl_m_TArgs_47" = unnamed_addr constant [2 x %_TyDescrTy_Typ*] [%_TyDescrTy_Typ* @"$TyDescr_ADT_Option_Int32_30", %_TyDescrTy_Typ* @"$TyDescr_Int32_8"]
@"$TyDescr_Pair_Option_(Int32)_Int32_ADTTyp_Specl_48" = unnamed_addr constant %"$TyDescrTy_ADTTyp_Specl_27" { i32 2, %_TyDescrTy_Typ** getelementptr inbounds ([2 x %_TyDescrTy_Typ*], [2 x %_TyDescrTy_Typ*]* @"$TyDescr_Pair_Option_(Int32)_Int32_ADTTyp_Specl_m_TArgs_47", i32 0, i32 0), %"$TyDescrTy_ADTTyp_Constr_29"** getelementptr inbounds ([1 x %"$TyDescrTy_ADTTyp_Constr_29"*], [1 x %"$TyDescrTy_ADTTyp_Constr_29"*]* @"$TyDescr_Pair_Option_(Int32)_Int32_ADTTyp_Specl_m_constrs_46", i32 0, i32 0), %"$TyDescrTy_ADTTyp_28"* @"$TyDescr_Pair_ADTTyp_43" }
@"$TyDescr_Pair_ADTTyp_m_specls_49" = unnamed_addr constant [1 x %"$TyDescrTy_ADTTyp_Specl_27"*] [%"$TyDescrTy_ADTTyp_Specl_27"* @"$TyDescr_Pair_Option_(Int32)_Int32_ADTTyp_Specl_48"]
@"$TyDescr_ADT_Pair_50" = unnamed_addr constant [4 x i8] c"Pair"

define %_Int32 @"$fundef_4"(%"$$fundef_4_env_51"*, %"Pair_Option_(Int32)_Int32"*) {
entry:
  %"$retval_5" = alloca %_Int32
  %"$p_tag_53" = getelementptr inbounds %"Pair_Option_(Int32)_Int32", %"Pair_Option_(Int32)_Int32"* %1, i32 0, i32 0
  %"$p_tag_54" = load i8, i8* %"$p_tag_53"
  switch i8 %"$p_tag_54", label %"$empty_default_55" [
    i8 0, label %"$Pair_56"
  ]

"$Pair_56":                                       ; preds = %entry
  %"$$p_0_gep_58" = getelementptr inbounds %"Pair_Option_(Int32)_Int32", %"Pair_Option_(Int32)_Int32"* %1, i32 0, i32 1
  %"$$p_0_load_59" = load %Option_Int32*, %Option_Int32** %"$$p_0_gep_58"
  %"$p_0" = alloca %Option_Int32*
  store %Option_Int32* %"$$p_0_load_59", %Option_Int32** %"$p_0"
  %"$$p_1_gep_60" = getelementptr inbounds %"Pair_Option_(Int32)_Int32", %"Pair_Option_(Int32)_Int32"* %1, i32 0, i32 2
  %"$$p_1_load_61" = load %_Int32, %_Int32* %"$$p_1_gep_60"
  %"$p_1" = alloca %_Int32
  store %_Int32 %"$$p_1_load_61", %_Int32* %"$p_1"
  %"$$p_0_64" = load %Option_Int32*, %Option_Int32** %"$p_0"
  %"$$p_0_tag_65" = getelementptr inbounds %Option_Int32, %Option_Int32* %"$$p_0_64", i32 0, i32 0
  %"$$p_0_tag_66" = load i8, i8* %"$$p_0_tag_65"
  switch i8 %"$$p_0_tag_66", label %"$default_67" [
    i8 0, label %"$Some_68"
  ]

"$Some_68":                                       ; preds = %"$Pair_56"
  %"$$p_0_69" = bitcast %Option_Int32* %"$$p_0_64" to %Some_Int32*
  %"$z_gep_70" = getelementptr inbounds %Some_Int32, %Some_Int32* %"$$p_0_69", i32 0, i32 1
  %"$z_load_71" = load %_Int32, %_Int32* %"$z_gep_70"
  %z = alloca %_Int32
  store %_Int32 %"$z_load_71", %_Int32* %z
  %"$z_72" = load %_Int32, %_Int32* %z
  store %_Int32 %"$z_72", %_Int32* %"$retval_5"
  br label %"$matchsucc_62"

"$default_67":                                    ; preds = %"$Pair_56"
  br label %"$joinp_2"

"$joinp_2":                                       ; preds = %"$default_67"
  %"$$p_1_63" = load %_Int32, %_Int32* %"$p_1"
  store %_Int32 %"$$p_1_63", %_Int32* %"$retval_5"
  br label %"$matchsucc_62"

"$matchsucc_62":                                  ; preds = %"$Some_68", %"$joinp_2"
  br label %"$matchsucc_52"

"$empty_default_55":                              ; preds = %entry
  br label %"$matchsucc_52"

"$matchsucc_52":                                  ; preds = %"$matchsucc_62", %"$empty_default_55"
  %"$$retval_5_73" = load %_Int32, %_Int32* %"$retval_5"
  ret %_Int32 %"$$retval_5_73"
}

define { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* } @"$scilla_expr_74"(i8*) {
entry:
  %"$expr_3" = alloca { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* }
  %f = alloca { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* }
  store { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* } { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)* bitcast (%_Int32 (%"$$fundef_4_env_51"*, %"Pair_Option_(Int32)_Int32"*)* @"$fundef_4" to %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*), i8* null }, { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* }* %f
  %"$f_78" = load { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* }, { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* }* %f
  store { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* } %"$f_78", { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* }* %"$expr_3"
  %"$$expr_3_79" = load { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* }, { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* }* %"$expr_3"
  ret { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* } %"$$expr_3_79"
}

declare void @_print_scilla_val(%_TyDescrTy_Typ*, i8*)

define void @scilla_main() {
entry:
  %"$cloval_80" = call { %_Int32 (i8*, %"Pair_Option_(Int32)_Int32"*)*, i8* } @"$scilla_expr_74"(i8* null)
  ret void
}

