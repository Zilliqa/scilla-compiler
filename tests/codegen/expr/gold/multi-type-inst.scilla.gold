Instantiating at (codegen/expr/multi-type-inst.scilla,3,3) with type: Int32
Instantiating at (codegen/expr/multi-type-inst.scilla,3,3) with type: Int64
Instantiating at (codegen/expr/multi-type-inst.scilla,10,3) with type: Int32
Instantiating at (codegen/expr/multi-type-inst.scilla,10,3) with type: Int64
Closure converted AST:
fundef (_fundef_1 : Uint32) ()
environment: ()
body:
[_fundef_3]((a : 'A)) <- (a : 'A)
  (_retval_2 : Uint32) = [(_fundef_3 : Uint32)]
  ret (_retval_2 : Uint32)

fundef (_fundef_3 : Uint32) ((a : 'A) : Int32)
environment: ((a : 'A) : 'A)
body:
(a : 'A) <- [_fundef_3]((a : 'A))
  (an : List ('A)) = Nil { Int32 }
  (_retval_4 : Uint32) = Cons { Int32 }(a : 'A) (_an5 : List ('A))
  ret (_retval_4 : Uint32)

fundef (_fundef_6 : Uint32) ()
environment: ()
body:
[_fundef_8]((a : 'A)) <- (a : 'A)
  (_retval_7 : Uint32) = [(_fundef_8 : Uint32)]
  ret (_retval_7 : Uint32)

fundef (_fundef_8 : Uint32) ((a : 'A) : Int64)
environment: ((a : 'A) : 'A)
body:
(a : 'A) <- [_fundef_8]((a : 'A))
  (an : List ('A)) = Nil { Int64 }
  (_retval_9 : Uint32) = Cons { Int64 }(a : 'A) (_an10 : List ('A))
  ret (_retval_9 : Uint32)

fundef (_fundef_12 : Uint32) ()
environment: ((a : 'A) : 'A)
body:
(a : 'A) <- [_fundef_12]((a : 'A))
  (an : List ('A)) = Nil { Int32 }
  (a1 : List ('A)) = Cons { Int32 }(a : 'A) (_an14 : List ('A))
  (_retval_13 : Uint32) = Cons { Int32 }(a : 'A) (_a115 : List ('A))
  ret (_retval_13 : Uint32)

fundef (_fundef_16 : Uint32) ()
environment: ((a : 'A) : 'A)
body:
(a : 'A) <- [_fundef_16]((a : 'A))
  (an : List ('A)) = Nil { Int64 }
  (a1 : List ('A)) = Cons { Int64 }(a : 'A) (_an18 : List ('A))
  (_retval_17 : Uint32) = Cons { Int64 }(a : 'A) (_a119 : List ('A))
  ret (_retval_17 : Uint32)
(t1 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_1 : Uint32); Int64 -> (_fundef_6 : Uint32)]
  [_fundef_12]((a : 'A)) <- (a : 'A)
  (t2 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_12 : Uint32); Int64 -> (_fundef_16 : Uint32)]
  (some_bool : Bool) = True {  }
  match (_some_bool21 : Bool) with
  | True =>
(f : forall 'A. 'A -> List ('A)) = (_t111 : forall 'A. 'A -> List ('A))

  | False =>
(f : forall 'A. 'A -> List ('A)) = (_t220 : forall 'A. 'A -> List ('A))
  (some_bool2 : Bool) = False {  }
  match (_some_bool223 : Bool) with
  | True =>
(f1 : Int32 -> List (Int32)) = (_f22 : forall 'A. 'A -> List ('A)) Int32
    (len : List (Int32) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int32
    (one : Int32) = (Int32 1)
    (f1l : List (Int32)) = (_f124 : Int32 -> List (Int32)) (_one26 : Int32)
    (_expr_0 : Uint32) = (_len25 : List (Int32) -> Uint32) (_f1l27 : List (Int32))

  | False =>
(f2 : Int64 -> List (Int64)) = (_f22 : forall 'A. 'A -> List ('A)) Int64
    (len : List (Int64) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int64
    (one : Int64) = (Int64 1)
    (f2l : List (Int64)) = (_f228 : Int64 -> List (Int64)) (_one30 : Int64)
    (_expr_0 : Uint32) = (_len29 : List (Int64) -> Uint32) (_f2l31 : List (Int64))
