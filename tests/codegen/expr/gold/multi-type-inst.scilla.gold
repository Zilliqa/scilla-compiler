Instantiating at (codegen/expr/multi-type-inst.scilla,3,3) with type: Int32
Instantiating at (codegen/expr/multi-type-inst.scilla,3,3) with type: Int64
Instantiating at (codegen/expr/multi-type-inst.scilla,10,3) with type: Int32
Instantiating at (codegen/expr/multi-type-inst.scilla,10,3) with type: Int64
Closure converted AST:
fundef (_fundef_2 : () -> Int32 -> List (Int32)) ()
environment: ()
body:
  (_retval_3 : Int32 -> List (Int32)) = [(_fundef_4 : Int32 -> List (Int32))]
  ret (_retval_3 : Int32 -> List (Int32))

fundef (_fundef_4 : Int32 -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (_an_6 : List (Int32)) = Nil { Int32 }
  (_retval_5 : List (Int32)) = Cons { Int32 }(a : Int32) (_an_6 : List (Int32))
  ret (_retval_5 : List (Int32))

fundef (_fundef_7 : () -> Int64 -> List (Int64)) ()
environment: ()
body:
  (_retval_8 : Int64 -> List (Int64)) = [(_fundef_9 : Int64 -> List (Int64))]
  ret (_retval_8 : Int64 -> List (Int64))

fundef (_fundef_9 : Int64 -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (_an_11 : List (Int64)) = Nil { Int64 }
  (_retval_10 : List (Int64)) = Cons { Int64 }(a : Int64) (_an_11 : List (Int64))
  ret (_retval_10 : List (Int64))

fundef (_fundef_13 : () -> Int32 -> List (Int32)) ()
environment: ()
body:
  (_retval_14 : Int32 -> List (Int32)) = [(_fundef_15 : Int32 -> List (Int32))]
  ret (_retval_14 : Int32 -> List (Int32))

fundef (_fundef_15 : Int32 -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (_an_17 : List (Int32)) = Nil { Int32 }
  (_a1_18 : List (Int32)) = Cons { Int32 }(a : Int32) (_an_17 : List (Int32))
  (_retval_16 : List (Int32)) = Cons { Int32 }(a : Int32) (_a1_18 : List (Int32))
  ret (_retval_16 : List (Int32))

fundef (_fundef_19 : () -> Int64 -> List (Int64)) ()
environment: ()
body:
  (_retval_20 : Int64 -> List (Int64)) = [(_fundef_21 : Int64 -> List (Int64))]
  ret (_retval_20 : Int64 -> List (Int64))

fundef (_fundef_21 : Int64 -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (_an_23 : List (Int64)) = Nil { Int64 }
  (_a1_24 : List (Int64)) = Cons { Int64 }(a : Int64) (_an_23 : List (Int64))
  (_retval_22 : List (Int64)) = Cons { Int64 }(a : Int64) (_a1_24 : List (Int64))
  ret (_retval_22 : List (Int64))

expr_body:
  (_t1_1 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_2 : () -> Int32 -> List (Int32)); Int64 -> (_fundef_7 : () -> Int64 -> List (Int64))]
  (_t2_12 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_13 : () -> Int32 -> List (Int32)); Int64 -> (_fundef_19 : () -> Int64 -> List (Int64))]
  (_some_bool_25 : Bool) = True {  }
  match (_some_bool_25 : Bool) with
  | True =>
    (_f_26 : forall 'A. 'A -> List ('A)) = (_t1_1 : forall 'A. 'A -> List ('A))
  | False =>
    (_f_26 : forall 'A. 'A -> List ('A)) = (_t2_12 : forall 'A. 'A -> List ('A))
  (_some_bool2_27 : Bool) = False {  }
  match (_some_bool2_27 : Bool) with
  | True =>
    (_f1_28 : Int32 -> List (Int32)) = (_f_26 : forall 'A. 'A -> List ('A)) Int32
    (_len_29 : List (Int32) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int32
    (_one_30 : Int32) = (Int32 1)
    (_f1l_31 : List (Int32)) = (_f1_28 : Int32 -> List (Int32)) (_one_30 : Int32)
    (_expr_0 : Uint32) = (_len_29 : List (Int32) -> Uint32) (_f1l_31 : List (Int32))
  | False =>
    (_f2_32 : Int64 -> List (Int64)) = (_f_26 : forall 'A. 'A -> List ('A)) Int64
    (_len_33 : List (Int64) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int64
    (_one_34 : Int64) = (Int64 1)
    (_f2l_35 : List (Int64)) = (_f2_32 : Int64 -> List (Int64)) (_one_34 : Int64)
    (_expr_0 : Uint32) = (_len_33 : List (Int64) -> Uint32) (_f2l_35 : List (Int64))
