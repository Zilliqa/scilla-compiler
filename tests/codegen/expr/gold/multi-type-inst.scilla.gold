Instantiating at (codegen/expr/multi-type-inst.scilla,3,3) with type: Int32
Instantiating at (codegen/expr/multi-type-inst.scilla,3,3) with type: Int64
Instantiating at (codegen/expr/multi-type-inst.scilla,10,3) with type: Int32
Instantiating at (codegen/expr/multi-type-inst.scilla,10,3) with type: Int64
Closure converted AST:
fundef ($fundef_1 : () -> Int32 -> List (Int32)) ()
environment: ()
body:
  ($retval_2 : Int32 -> List (Int32)) = [($fundef_3 : Int32 -> List (Int32))]
  ret ($retval_2 : Int32 -> List (Int32))

fundef ($fundef_3 : Int32 -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (an : List (Int32)) = Nil { Int32 }
  ($retval_4 : List (Int32)) = Cons { Int32 }(a : Int32) (an : List (Int32))
  ret ($retval_4 : List (Int32))

fundef ($fundef_5 : () -> Int64 -> List (Int64)) ()
environment: ()
body:
  ($retval_6 : Int64 -> List (Int64)) = [($fundef_7 : Int64 -> List (Int64))]
  ret ($retval_6 : Int64 -> List (Int64))

fundef ($fundef_7 : Int64 -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (an : List (Int64)) = Nil { Int64 }
  ($retval_8 : List (Int64)) = Cons { Int64 }(a : Int64) (an : List (Int64))
  ret ($retval_8 : List (Int64))

fundef ($fundef_9 : () -> Int32 -> List (Int32)) ()
environment: ()
body:
  ($retval_10 : Int32 -> List (Int32)) = [($fundef_11 : Int32 -> List (Int32))]
  ret ($retval_10 : Int32 -> List (Int32))

fundef ($fundef_11 : Int32 -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (an : List (Int32)) = Nil { Int32 }
  (a1 : List (Int32)) = Cons { Int32 }(a : Int32) (an : List (Int32))
  ($retval_12 : List (Int32)) = Cons { Int32 }(a : Int32) (a1 : List (Int32))
  ret ($retval_12 : List (Int32))

fundef ($fundef_13 : () -> Int64 -> List (Int64)) ()
environment: ()
body:
  ($retval_14 : Int64 -> List (Int64)) = [($fundef_15 : Int64 -> List (Int64))]
  ret ($retval_14 : Int64 -> List (Int64))

fundef ($fundef_15 : Int64 -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (an : List (Int64)) = Nil { Int64 }
  (a1 : List (Int64)) = Cons { Int64 }(a : Int64) (an : List (Int64))
  ($retval_16 : List (Int64)) = Cons { Int64 }(a : Int64) (a1 : List (Int64))
  ret ($retval_16 : List (Int64))

expr_body:
  (t1 : forall 'A. 'A -> List ('A)) = [Int32 -> ($fundef_1 : () -> Int32 -> List (Int32)); Int64 -> ($fundef_5 : () -> Int64 -> List (Int64))]
  (t2 : forall 'A. 'A -> List ('A)) = [Int32 -> ($fundef_9 : () -> Int32 -> List (Int32)); Int64 -> ($fundef_13 : () -> Int64 -> List (Int64))]
  (some_bool : Bool) = True {  }
  match (some_bool : Bool) with
  | True =>
    (f : forall 'A. 'A -> List ('A)) = (t1 : forall 'A. 'A -> List ('A))
  | False =>
    (f : forall 'A. 'A -> List ('A)) = (t2 : forall 'A. 'A -> List ('A))
  (some_bool2 : Bool) = False {  }
  match (some_bool2 : Bool) with
  | True =>
    (f1 : Int32 -> List (Int32)) = (f : forall 'A. 'A -> List ('A)) Int32
    (len : List (Int32) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int32
    (one : Int32) = (Int32 1)
    (f1l : List (Int32)) = (f1 : Int32 -> List (Int32)) (one : Int32)
    ($expr_0 : Uint32) = (len : List (Int32) -> Uint32) (f1l : List (Int32))
  | False =>
    (f2 : Int64 -> List (Int64)) = (f : forall 'A. 'A -> List ('A)) Int64
    (len : List (Int64) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int64
    (one : Int64) = (Int64 1)
    (f2l : List (Int64)) = (f2 : Int64 -> List (Int64)) (one : Int64)
    ($expr_0 : Uint32) = (len : List (Int64) -> Uint32) (f2l : List (Int64))
