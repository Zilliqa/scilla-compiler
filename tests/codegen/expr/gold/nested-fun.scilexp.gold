Closure converted AST:
fundef ($fundef_1 : [Int32] -> ([Int32] -> Int32)) ((a : Int32) : Int32)
environment: ()
body:
  allocate_closure_env ($fundef_3 : [Int32] -> Int32)
  [($fundef_3 : [Int32] -> Int32)]((a : Int32)) <- (a : Int32)
  ($retval_2 : [Int32] -> Int32) = [($fundef_3 : [Int32] -> Int32)]
  ret ($retval_2 : [Int32] -> Int32)

fundef ($fundef_3 : [Int32] -> Int32) ((b : Int32) : Int32)
environment: ((a : Int32) : Int32)
body:
  (a : Int32) <- [($fundef_3 : [Int32] -> Int32)]((a : Int32))
  ($retval_4 : Int32) = (a : Int32)
  ret ($retval_4 : Int32)

expr_body:
  ($expr_0 : [Int32] -> ([Int32] -> Int32)) = [($fundef_1 : [Int32] -> ([Int32] -> Int32))]
  ret ($expr_0 : [Int32] -> ([Int32] -> Int32))
LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"$$fundef_3_env_5" = type { %Int32 }
%Int32 = type { i32 }
%"$$fundef_1_env_6" = type {}

define %Int32 @"$fundef_3"(%"$$fundef_3_env_5"*, %Int32) {
entry:
  %"$retval_4" = alloca %Int32
  %a = alloca %Int32
  %"$$fundef_3_env_a_15" = getelementptr inbounds %"$$fundef_3_env_5", %"$$fundef_3_env_5"* %0, i32 0, i32 0
  %"$a_envload_16" = load %Int32, %Int32* %"$$fundef_3_env_a_15"
  store %Int32 %"$a_envload_16", %Int32* %a
  %"$a_17" = load %Int32, %Int32* %a
  store %Int32 %"$a_17", %Int32* %"$retval_4"
  %"$$retval_4_18" = load %Int32, %Int32* %"$retval_4"
  ret %Int32 %"$$retval_4_18"
}

define { %Int32 (void*, %Int32)*, void* } @"$fundef_1"(%"$$fundef_1_env_6"*, %Int32) {
entry:
  %"$retval_2" = alloca { %Int32 (void*, %Int32)*, void* }
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %"$$fundef_3_envp_7" = bitcast i8* %malloccall to %"$$fundef_3_env_5"*
  %"$$fundef_3_env_voidp_9" = bitcast %"$$fundef_3_env_5"* %"$$fundef_3_envp_7" to void*
  %"$$fundef_3_cloval_10" = insertvalue { %Int32 (void*, %Int32)*, void* } { %Int32 (void*, %Int32)* bitcast (%Int32 (%"$$fundef_3_env_5"*, %Int32)* @"$fundef_3" to %Int32 (void*, %Int32)*), void* undef }, void* %"$$fundef_3_env_voidp_9", 1
  %"$$fundef_3_envp_11" = extractvalue { %Int32 (void*, %Int32)*, void* } %"$$fundef_3_cloval_10", 1
  %"$$fundef_3_envp_12" = bitcast void* %"$$fundef_3_envp_11" to %"$$fundef_3_env_5"*
  %"$$fundef_3_env_a_13" = getelementptr inbounds %"$$fundef_3_env_5", %"$$fundef_3_env_5"* %"$$fundef_3_envp_12", i32 0, i32 0
  store %Int32 %1, %Int32* %"$$fundef_3_env_a_13"
  store { %Int32 (void*, %Int32)*, void* } %"$$fundef_3_cloval_10", { %Int32 (void*, %Int32)*, void* }* %"$retval_2"
  %"$$retval_2_14" = load { %Int32 (void*, %Int32)*, void* }, { %Int32 (void*, %Int32)*, void* }* %"$retval_2"
  ret { %Int32 (void*, %Int32)*, void* } %"$$retval_2_14"
}

declare noalias i8* @malloc(i32)

define { { %Int32 (void*, %Int32)*, void* } (void*, %Int32)*, void* } @"$scilla_expr_19"(void*) {
entry:
  %"$expr_0" = alloca { { %Int32 (void*, %Int32)*, void* } (void*, %Int32)*, void* }
  store { { %Int32 (void*, %Int32)*, void* } (void*, %Int32)*, void* } { { %Int32 (void*, %Int32)*, void* } (void*, %Int32)* bitcast ({ %Int32 (void*, %Int32)*, void* } (%"$$fundef_1_env_6"*, %Int32)* @"$fundef_1" to { %Int32 (void*, %Int32)*, void* } (void*, %Int32)*), void* null }, { { %Int32 (void*, %Int32)*, void* } (void*, %Int32)*, void* }* %"$expr_0"
  %"$$expr_0_23" = load { { %Int32 (void*, %Int32)*, void* } (void*, %Int32)*, void* }, { { %Int32 (void*, %Int32)*, void* } (void*, %Int32)*, void* }* %"$expr_0"
  ret { { %Int32 (void*, %Int32)*, void* } (void*, %Int32)*, void* } %"$$expr_0_23"
}

