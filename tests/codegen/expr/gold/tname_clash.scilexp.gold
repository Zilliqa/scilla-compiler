Instantiating at (codegen/expr/tname_clash.scilexp,2,3) with type: Int32
Instantiating at (codegen/expr/tname_clash.scilexp,3,3) with type: Int32
Instantiating at (codegen/expr/tname_clash.scilexp,3,3) with type: Int64
Instantiating at (codegen/expr/tname_clash.scilexp,2,3) with type: Int64
Instantiating at (codegen/expr/tname_clash.scilexp,3,3) with type: Int32
Instantiating at (codegen/expr/tname_clash.scilexp,3,3) with type: Int64
Instantiating at (codegen/expr/tname_clash.scilexp,10,3) with type: Int32
Instantiating at (codegen/expr/tname_clash.scilexp,10,3) with type: Int64
Closure converted AST:
fundef ($fundef_1 : [()] -> (forall 'B. [Int32] -> (['B] -> Pair (Int32) ('B)))) ()
environment: ()
body:
  ($retval_2 : forall 'B. [Int32] -> (['B] -> Pair (Int32) ('B))) = [Int32 -> ($fundef_3 : [()] -> ([Int32] -> ([Int32] -> Pair (Int32) (Int32)))); Int64 -> ($fundef_9 : [()] -> ([Int32] -> ([Int64] -> Pair (Int32) (Int64))))]
  ret ($retval_2 : forall 'B. [Int32] -> (['B] -> Pair (Int32) ('B)))

fundef ($fundef_3 : [()] -> ([Int32] -> ([Int32] -> Pair (Int32) (Int32)))) ()
environment: ()
body:
  ($retval_4 : [Int32] -> ([Int32] -> Pair (Int32) (Int32))) = [($fundef_5 : [Int32] -> ([Int32] -> Pair (Int32) (Int32)))]
  ret ($retval_4 : [Int32] -> ([Int32] -> Pair (Int32) (Int32)))

fundef ($fundef_5 : [Int32] -> ([Int32] -> Pair (Int32) (Int32))) ((a : Int32) : Int32)
environment: ()
body:
  allocate_closure_env $fundef_7
  [$fundef_7]((a : Int32)) <- (a : Int32)
  ($retval_6 : [Int32] -> Pair (Int32) (Int32)) = [($fundef_7 : [Int32] -> Pair (Int32) (Int32))]
  ret ($retval_6 : [Int32] -> Pair (Int32) (Int32))

fundef ($fundef_7 : [Int32] -> Pair (Int32) (Int32)) ((b : Int32) : Int32)
environment: ((a : Int32) : Int32)
body:
  (a : Int32) <- [$fundef_7]((a : Int32))
  ($retval_8 : Pair (Int32) (Int32)) = Pair { Int32 Int32 }(a : Int32) (b : Int32)
  ret ($retval_8 : Pair (Int32) (Int32))

fundef ($fundef_9 : [()] -> ([Int32] -> ([Int64] -> Pair (Int32) (Int64)))) ()
environment: ()
body:
  ($retval_10 : [Int32] -> ([Int64] -> Pair (Int32) (Int64))) = [($fundef_11 : [Int32] -> ([Int64] -> Pair (Int32) (Int64)))]
  ret ($retval_10 : [Int32] -> ([Int64] -> Pair (Int32) (Int64)))

fundef ($fundef_11 : [Int32] -> ([Int64] -> Pair (Int32) (Int64))) ((a : Int32) : Int32)
environment: ()
body:
  allocate_closure_env $fundef_13
  [$fundef_13]((a : Int32)) <- (a : Int32)
  ($retval_12 : [Int64] -> Pair (Int32) (Int64)) = [($fundef_13 : [Int64] -> Pair (Int32) (Int64))]
  ret ($retval_12 : [Int64] -> Pair (Int32) (Int64))

fundef ($fundef_13 : [Int64] -> Pair (Int32) (Int64)) ((b : Int64) : Int64)
environment: ((a : Int32) : Int32)
body:
  (a : Int32) <- [$fundef_13]((a : Int32))
  ($retval_14 : Pair (Int32) (Int64)) = Pair { Int32 Int64 }(a : Int32) (b : Int64)
  ret ($retval_14 : Pair (Int32) (Int64))

fundef ($fundef_15 : [()] -> (forall 'B. [Int64] -> (['B] -> Pair (Int64) ('B)))) ()
environment: ()
body:
  ($retval_16 : forall 'B. [Int64] -> (['B] -> Pair (Int64) ('B))) = [Int32 -> ($fundef_17 : [()] -> ([Int64] -> ([Int32] -> Pair (Int64) (Int32)))); Int64 -> ($fundef_23 : [()] -> ([Int64] -> ([Int64] -> Pair (Int64) (Int64))))]
  ret ($retval_16 : forall 'B. [Int64] -> (['B] -> Pair (Int64) ('B)))

fundef ($fundef_17 : [()] -> ([Int64] -> ([Int32] -> Pair (Int64) (Int32)))) ()
environment: ()
body:
  ($retval_18 : [Int64] -> ([Int32] -> Pair (Int64) (Int32))) = [($fundef_19 : [Int64] -> ([Int32] -> Pair (Int64) (Int32)))]
  ret ($retval_18 : [Int64] -> ([Int32] -> Pair (Int64) (Int32)))

fundef ($fundef_19 : [Int64] -> ([Int32] -> Pair (Int64) (Int32))) ((a : Int64) : Int64)
environment: ()
body:
  allocate_closure_env $fundef_21
  [$fundef_21]((a : Int64)) <- (a : Int64)
  ($retval_20 : [Int32] -> Pair (Int64) (Int32)) = [($fundef_21 : [Int32] -> Pair (Int64) (Int32))]
  ret ($retval_20 : [Int32] -> Pair (Int64) (Int32))

fundef ($fundef_21 : [Int32] -> Pair (Int64) (Int32)) ((b : Int32) : Int32)
environment: ((a : Int64) : Int64)
body:
  (a : Int64) <- [$fundef_21]((a : Int64))
  ($retval_22 : Pair (Int64) (Int32)) = Pair { Int64 Int32 }(a : Int64) (b : Int32)
  ret ($retval_22 : Pair (Int64) (Int32))

fundef ($fundef_23 : [()] -> ([Int64] -> ([Int64] -> Pair (Int64) (Int64)))) ()
environment: ()
body:
  ($retval_24 : [Int64] -> ([Int64] -> Pair (Int64) (Int64))) = [($fundef_25 : [Int64] -> ([Int64] -> Pair (Int64) (Int64)))]
  ret ($retval_24 : [Int64] -> ([Int64] -> Pair (Int64) (Int64)))

fundef ($fundef_25 : [Int64] -> ([Int64] -> Pair (Int64) (Int64))) ((a : Int64) : Int64)
environment: ()
body:
  allocate_closure_env $fundef_27
  [$fundef_27]((a : Int64)) <- (a : Int64)
  ($retval_26 : [Int64] -> Pair (Int64) (Int64)) = [($fundef_27 : [Int64] -> Pair (Int64) (Int64))]
  ret ($retval_26 : [Int64] -> Pair (Int64) (Int64))

fundef ($fundef_27 : [Int64] -> Pair (Int64) (Int64)) ((b : Int64) : Int64)
environment: ((a : Int64) : Int64)
body:
  (a : Int64) <- [$fundef_27]((a : Int64))
  ($retval_28 : Pair (Int64) (Int64)) = Pair { Int64 Int64 }(a : Int64) (b : Int64)
  ret ($retval_28 : Pair (Int64) (Int64))

fundef ($fundef_29 : [()] -> (forall 'B1. [Int32] -> (['B1] -> Pair (Int32) ('B1)))) ()
environment: ((tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B))) : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B)))
body:
  (tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B))) <- [$fundef_29]((tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B))))
  ($retval_30 : forall 'B1. [Int32] -> (['B1] -> Pair (Int32) ('B1))) = (tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B))) Int32
  ret ($retval_30 : forall 'B1. [Int32] -> (['B1] -> Pair (Int32) ('B1)))

fundef ($fundef_31 : [()] -> (forall 'B1. [Int64] -> (['B1] -> Pair (Int64) ('B1)))) ()
environment: ((tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B))) : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B)))
body:
  (tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B))) <- [$fundef_31]((tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B))))
  ($retval_32 : forall 'B1. [Int64] -> (['B1] -> Pair (Int64) ('B1))) = (tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B))) Int64
  ret ($retval_32 : forall 'B1. [Int64] -> (['B1] -> Pair (Int64) ('B1)))

expr_body:
  (tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B))) = [Int32 -> ($fundef_1 : [()] -> (forall 'B. [Int32] -> (['B] -> Pair (Int32) ('B)))); Int64 -> ($fundef_15 : [()] -> (forall 'B. [Int64] -> (['B] -> Pair (Int64) ('B))))]
  [$fundef_29]((tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B)))) <- (tf : forall 'A. forall 'B. ['A] -> (['B] -> Pair ('A) ('B)))
  (tf2 : forall 'B. forall 'B1. ['B] -> (['B1] -> Pair ('B) ('B1))) = [Int32 -> ($fundef_29 : [()] -> (forall 'B1. [Int32] -> (['B1] -> Pair (Int32) ('B1)))); Int64 -> ($fundef_31 : [()] -> (forall 'B1. [Int64] -> (['B1] -> Pair (Int64) ('B1))))]
  ($expr_0 : [Int32] -> ([Int64] -> Pair (Int32) (Int64))) = (tf2 : forall 'B. forall 'B1. ['B] -> (['B1] -> Pair ('B) ('B1))) Int32 Int64
  ret ($expr_0 : [Int32] -> ([Int64] -> Pair (Int32) (Int64)))
