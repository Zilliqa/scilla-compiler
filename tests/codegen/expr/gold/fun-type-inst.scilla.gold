Instantiating at (codegen/expr/fun-type-inst.scilla,3,3) with type: Int32
Instantiating at (codegen/expr/fun-type-inst.scilla,3,3) with type: Int64
Instantiating at (codegen/expr/fun-type-inst.scilla,10,3) with type: Int32
Instantiating at (codegen/expr/fun-type-inst.scilla,10,3) with type: Int64
Instantiating at (codegen/expr/fun-type-inst.scilla,18,3) with type: Int32
Instantiating at (codegen/expr/fun-type-inst.scilla,18,3) with type: Int64
Closure converted AST:
fundef (_fundef_2 : () -> Int32 -> List (Int32)) ()
environment: ()
body:
  (_retval_3 : Int32 -> List (Int32)) = [(_fundef_4 : Int32 -> List (Int32))]
  ret (_retval_3 : Int32 -> List (Int32))

fundef (_fundef_4 : Int32 -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (_an_6 : List (Int32)) = Nil { Int32 }
  (_retval_5 : List (Int32)) = Cons { Int32 }(a : Int32) (_an_6 : List (Int32))
  ret (_retval_5 : List (Int32))

fundef (_fundef_7 : () -> Int64 -> List (Int64)) ()
environment: ()
body:
  (_retval_8 : Int64 -> List (Int64)) = [(_fundef_9 : Int64 -> List (Int64))]
  ret (_retval_8 : Int64 -> List (Int64))

fundef (_fundef_9 : Int64 -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (_an_11 : List (Int64)) = Nil { Int64 }
  (_retval_10 : List (Int64)) = Cons { Int64 }(a : Int64) (_an_11 : List (Int64))
  ret (_retval_10 : List (Int64))

fundef (_fundef_13 : () -> Int32 -> List (Int32)) ()
environment: ()
body:
  (_retval_14 : Int32 -> List (Int32)) = [(_fundef_15 : Int32 -> List (Int32))]
  ret (_retval_14 : Int32 -> List (Int32))

fundef (_fundef_15 : Int32 -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (_an_17 : List (Int32)) = Nil { Int32 }
  (_a1_18 : List (Int32)) = Cons { Int32 }(a : Int32) (_an_17 : List (Int32))
  (_retval_16 : List (Int32)) = Cons { Int32 }(a : Int32) (_a1_18 : List (Int32))
  ret (_retval_16 : List (Int32))

fundef (_fundef_19 : () -> Int64 -> List (Int64)) ()
environment: ()
body:
  (_retval_20 : Int64 -> List (Int64)) = [(_fundef_21 : Int64 -> List (Int64))]
  ret (_retval_20 : Int64 -> List (Int64))

fundef (_fundef_21 : Int64 -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (_an_23 : List (Int64)) = Nil { Int64 }
  (_a1_24 : List (Int64)) = Cons { Int64 }(a : Int64) (_an_23 : List (Int64))
  (_retval_22 : List (Int64)) = Cons { Int64 }(a : Int64) (_a1_24 : List (Int64))
  ret (_retval_22 : List (Int64))

fundef (_fundef_26 : () -> (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) ()
environment: ()
body:
  (_retval_27 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) = [(_fundef_28 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32))]
  ret (_retval_27 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32))

fundef (_fundef_28 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) ((f : forall 'A. 'A -> List ('A)) : forall 'A. 'A -> List ('A))
environment: ()
body:
  (_retval_29 : Int32 -> List (Int32)) = (f : forall 'A. 'A -> List ('A)) Int32
  ret (_retval_29 : Int32 -> List (Int32))

fundef (_fundef_30 : () -> (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) ()
environment: ()
body:
  (_retval_31 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) = [(_fundef_32 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64))]
  ret (_retval_31 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64))

fundef (_fundef_32 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) ((f : forall 'A. 'A -> List ('A)) : forall 'A. 'A -> List ('A))
environment: ()
body:
  (_retval_33 : Int64 -> List (Int64)) = (f : forall 'A. 'A -> List ('A)) Int64
  ret (_retval_33 : Int64 -> List (Int64))

expr_body:
  (_t1_1 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_2 : () -> Int32 -> List (Int32)); Int64 -> (_fundef_7 : () -> Int64 -> List (Int64))]
  (_t2_12 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_13 : () -> Int32 -> List (Int32)); Int64 -> (_fundef_19 : () -> Int64 -> List (Int64))]
  (_t_25 : forall 'B. (forall 'A. 'A -> List ('A)) -> 'B -> List ('B)) = [Int32 -> (_fundef_26 : () -> (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)); Int64 -> (_fundef_30 : () -> (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64))]
  match (some_bool : Bool) with
  | True =>
    (_f11_34 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) = (_t_25 : forall 'B. (forall 'A. 'A -> List ('A)) -> 'B -> List ('B)) Int32
    (_f1_35 : Int32 -> List (Int32)) = (_f11_34 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) (_t1_1 : forall 'A. 'A -> List ('A))
    (_len_36 : List (Int32) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int32
    (_one_37 : Int32) = (Int32 1)
    (_f1l_38 : List (Int32)) = (_f1_35 : Int32 -> List (Int32)) (_one_37 : Int32)
    (_expr_0 : Uint32) = (_len_36 : List (Int32) -> Uint32) (_f1l_38 : List (Int32))
  | False =>
    (_f22_39 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) = (_t_25 : forall 'B. (forall 'A. 'A -> List ('A)) -> 'B -> List ('B)) Int64
    (_f2_40 : Int64 -> List (Int64)) = (_f22_39 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) (_t2_12 : forall 'A. 'A -> List ('A))
    (_len_41 : List (Int64) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int64
    (_one_42 : Int64) = (Int64 1)
    (_f2l_43 : List (Int64)) = (_f2_40 : Int64 -> List (Int64)) (_one_42 : Int64)
    (_expr_0 : Uint32) = (_len_41 : List (Int64) -> Uint32) (_f2l_43 : List (Int64))
