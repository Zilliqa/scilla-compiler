Instantiating at (codegen/expr/fun-type-inst.scilla,3,3) with type: Int32
Instantiating at (codegen/expr/fun-type-inst.scilla,3,3) with type: Int64
Instantiating at (codegen/expr/fun-type-inst.scilla,10,3) with type: Int32
Instantiating at (codegen/expr/fun-type-inst.scilla,10,3) with type: Int64
Instantiating at (codegen/expr/fun-type-inst.scilla,18,3) with type: Int32
Instantiating at (codegen/expr/fun-type-inst.scilla,18,3) with type: Int64
Closure converted AST:
fundef (_fundef_1 : Uint32) ()
environment: ()
body:
[_fundef_3]((a : 'A)) <- (a : 'A)
  (_retval_2 : Uint32) = [(_fundef_3 : Uint32)]
  ret (_retval_2 : Uint32)

fundef (_fundef_3 : Uint32) ((a : 'A) : Int32)
environment: ((a : 'A) : 'A)
body:
(a : 'A) <- [_fundef_3]((a : 'A))
  (an : List ('A)) = Nil { Int32 }
  (_retval_4 : Uint32) = Cons { Int32 }(a : 'A) (_an5 : List ('A))
  ret (_retval_4 : Uint32)

fundef (_fundef_6 : Uint32) ()
environment: ()
body:
[_fundef_8]((a : 'A)) <- (a : 'A)
  (_retval_7 : Uint32) = [(_fundef_8 : Uint32)]
  ret (_retval_7 : Uint32)

fundef (_fundef_8 : Uint32) ((a : 'A) : Int64)
environment: ((a : 'A) : 'A)
body:
(a : 'A) <- [_fundef_8]((a : 'A))
  (an : List ('A)) = Nil { Int64 }
  (_retval_9 : Uint32) = Cons { Int64 }(a : 'A) (_an10 : List ('A))
  ret (_retval_9 : Uint32)

fundef (_fundef_12 : Uint32) ()
environment: ()
body:
[_fundef_14]((a : 'A)) <- (a : 'A)
  (_retval_13 : Uint32) = [(_fundef_14 : Uint32)]
  ret (_retval_13 : Uint32)

fundef (_fundef_14 : Uint32) ((a : 'A) : Int32)
environment: ((a : 'A) : 'A)
body:
(a : 'A) <- [_fundef_14]((a : 'A))
  (an : List ('A)) = Nil { Int32 }
  (a1 : List ('A)) = Cons { Int32 }(a : 'A) (_an16 : List ('A))
  (_retval_15 : Uint32) = Cons { Int32 }(a : 'A) (_a117 : List ('A))
  ret (_retval_15 : Uint32)

fundef (_fundef_18 : Uint32) ()
environment: ()
body:
[_fundef_20]((a : 'A)) <- (a : 'A)
  (_retval_19 : Uint32) = [(_fundef_20 : Uint32)]
  ret (_retval_19 : Uint32)

fundef (_fundef_20 : Uint32) ((a : 'A) : Int64)
environment: ((a : 'A) : 'A)
body:
(a : 'A) <- [_fundef_20]((a : 'A))
  (an : List ('A)) = Nil { Int64 }
  (a1 : List ('A)) = Cons { Int64 }(a : 'A) (_an22 : List ('A))
  (_retval_21 : Uint32) = Cons { Int64 }(a : 'A) (_a123 : List ('A))
  ret (_retval_21 : Uint32)

fundef (_fundef_25 : Uint32) ()
environment: ()
body:
[_fundef_27]((f : forall 'A. 'A -> List ('A))) <- (f : forall 'A. 'A -> List ('A))
  (_retval_26 : Uint32) = [(_fundef_27 : Uint32)]
  ret (_retval_26 : Uint32)

fundef (_fundef_27 : Uint32) ((f : forall 'A. 'A -> List ('A)) : forall 'A. 'A -> List ('A))
environment: ((f : forall 'A. 'A -> List ('A)) : forall 'A. 'A -> List ('A))
body:
(f : forall 'A. 'A -> List ('A)) <- [_fundef_27]((f : forall 'A. 'A -> List ('A)))
  (_retval_28 : Uint32) = (f : forall 'A. 'A -> List ('A)) Int32
  ret (_retval_28 : Uint32)

fundef (_fundef_29 : Uint32) ()
environment: ()
body:
[_fundef_31]((f : forall 'A. 'A -> List ('A))) <- (f : forall 'A. 'A -> List ('A))
  (_retval_30 : Uint32) = [(_fundef_31 : Uint32)]
  ret (_retval_30 : Uint32)

fundef (_fundef_31 : Uint32) ((f : forall 'A. 'A -> List ('A)) : forall 'A. 'A -> List ('A))
environment: ((f : forall 'A. 'A -> List ('A)) : forall 'A. 'A -> List ('A))
body:
(f : forall 'A. 'A -> List ('A)) <- [_fundef_31]((f : forall 'A. 'A -> List ('A)))
  (_retval_32 : Uint32) = (f : forall 'A. 'A -> List ('A)) Int64
  ret (_retval_32 : Uint32)
(t1 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_1 : Uint32); Int64 -> (_fundef_6 : Uint32)]
  (t2 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_12 : Uint32); Int64 -> (_fundef_18 : Uint32)]
  (t : forall 'B. (forall 'A. 'A -> List ('A)) -> 'B -> List ('B)) = [Int32 -> (_fundef_25 : Uint32); Int64 -> (_fundef_29 : Uint32)]
  match (some_bool : Bool) with
  | True =>
(f11 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) = (_t33 : forall 'B. (forall 'A. 'A -> List ('A)) -> 'B -> List ('B)) Int32
    (f1 : Int32 -> List (Int32)) = (_f1134 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) (_t111 : forall 'A. 'A -> List ('A))
    (len : List (Int32) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int32
    (one : Int32) = (Int32 1)
    (f1l : List (Int32)) = (_f135 : Int32 -> List (Int32)) (_one37 : Int32)
    (_expr_0 : Uint32) = (_len36 : List (Int32) -> Uint32) (_f1l38 : List (Int32))

  | False =>
(f22 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) = (_t33 : forall 'B. (forall 'A. 'A -> List ('A)) -> 'B -> List ('B)) Int64
    (f2 : Int64 -> List (Int64)) = (_f2239 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) (_t224 : forall 'A. 'A -> List ('A))
    (len : List (Int64) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int64
    (one : Int64) = (Int64 1)
    (f2l : List (Int64)) = (_f240 : Int64 -> List (Int64)) (_one42 : Int64)
    (_expr_0 : Uint32) = (_len41 : List (Int64) -> Uint32) (_f2l43 : List (Int64))
