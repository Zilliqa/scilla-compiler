Instantiating at (codegen/expr/fun-type-inst.scilla,3,3) with type: Int32
Instantiating at (codegen/expr/fun-type-inst.scilla,3,3) with type: Int64
Instantiating at (codegen/expr/fun-type-inst.scilla,10,3) with type: Int32
Instantiating at (codegen/expr/fun-type-inst.scilla,10,3) with type: Int64
Instantiating at (codegen/expr/fun-type-inst.scilla,18,3) with type: Int32
Instantiating at (codegen/expr/fun-type-inst.scilla,18,3) with type: Int64
Closure converted AST:
fundef (_fundef_1 : () -> Int32 -> List (Int32)) ()
environment: ()
body:
  (_retval_2 : Int32 -> List (Int32)) = [(_fundef_3 : Int32 -> List (Int32))]
  ret (_retval_2 : Int32 -> List (Int32))

fundef (_fundef_3 : Int32 -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (an : List (Int32)) = Nil { Int32 }
  (_retval_4 : List (Int32)) = Cons { Int32 }(a : Int32) (an : List (Int32))
  ret (_retval_4 : List (Int32))

fundef (_fundef_5 : () -> Int64 -> List (Int64)) ()
environment: ()
body:
  (_retval_6 : Int64 -> List (Int64)) = [(_fundef_7 : Int64 -> List (Int64))]
  ret (_retval_6 : Int64 -> List (Int64))

fundef (_fundef_7 : Int64 -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (an : List (Int64)) = Nil { Int64 }
  (_retval_8 : List (Int64)) = Cons { Int64 }(a : Int64) (an : List (Int64))
  ret (_retval_8 : List (Int64))

fundef (_fundef_9 : () -> Int32 -> List (Int32)) ()
environment: ()
body:
  (_retval_10 : Int32 -> List (Int32)) = [(_fundef_11 : Int32 -> List (Int32))]
  ret (_retval_10 : Int32 -> List (Int32))

fundef (_fundef_11 : Int32 -> List (Int32)) ((a : Int32) : Int32)
environment: ()
body:
  (an : List (Int32)) = Nil { Int32 }
  (a1 : List (Int32)) = Cons { Int32 }(a : Int32) (an : List (Int32))
  (_retval_12 : List (Int32)) = Cons { Int32 }(a : Int32) (a1 : List (Int32))
  ret (_retval_12 : List (Int32))

fundef (_fundef_13 : () -> Int64 -> List (Int64)) ()
environment: ()
body:
  (_retval_14 : Int64 -> List (Int64)) = [(_fundef_15 : Int64 -> List (Int64))]
  ret (_retval_14 : Int64 -> List (Int64))

fundef (_fundef_15 : Int64 -> List (Int64)) ((a : Int64) : Int64)
environment: ()
body:
  (an : List (Int64)) = Nil { Int64 }
  (a1 : List (Int64)) = Cons { Int64 }(a : Int64) (an : List (Int64))
  (_retval_16 : List (Int64)) = Cons { Int64 }(a : Int64) (a1 : List (Int64))
  ret (_retval_16 : List (Int64))

fundef (_fundef_17 : () -> (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) ()
environment: ()
body:
  (_retval_18 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) = [(_fundef_19 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32))]
  ret (_retval_18 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32))

fundef (_fundef_19 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) ((f : forall 'A. 'A -> List ('A)) : forall 'A. 'A -> List ('A))
environment: ()
body:
  (_retval_20 : Int32 -> List (Int32)) = (f : forall 'A. 'A -> List ('A)) Int32
  ret (_retval_20 : Int32 -> List (Int32))

fundef (_fundef_21 : () -> (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) ()
environment: ()
body:
  (_retval_22 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) = [(_fundef_23 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64))]
  ret (_retval_22 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64))

fundef (_fundef_23 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) ((f : forall 'A. 'A -> List ('A)) : forall 'A. 'A -> List ('A))
environment: ()
body:
  (_retval_24 : Int64 -> List (Int64)) = (f : forall 'A. 'A -> List ('A)) Int64
  ret (_retval_24 : Int64 -> List (Int64))

expr_body:
  (t1 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_1 : () -> Int32 -> List (Int32)); Int64 -> (_fundef_5 : () -> Int64 -> List (Int64))]
  (t2 : forall 'A. 'A -> List ('A)) = [Int32 -> (_fundef_9 : () -> Int32 -> List (Int32)); Int64 -> (_fundef_13 : () -> Int64 -> List (Int64))]
  (t : forall 'B. (forall 'A. 'A -> List ('A)) -> 'B -> List ('B)) = [Int32 -> (_fundef_17 : () -> (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)); Int64 -> (_fundef_21 : () -> (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64))]
  match (some_bool : Bool) with
  | True =>
    (f11 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) = (t : forall 'B. (forall 'A. 'A -> List ('A)) -> 'B -> List ('B)) Int32
    (f1 : Int32 -> List (Int32)) = (f11 : (forall 'A. 'A -> List ('A)) -> Int32 -> List (Int32)) (t1 : forall 'A. 'A -> List ('A))
    (len : List (Int32) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int32
    (one : Int32) = (Int32 1)
    (f1l : List (Int32)) = (f1 : Int32 -> List (Int32)) (one : Int32)
    (_expr_0 : Uint32) = (len : List (Int32) -> Uint32) (f1l : List (Int32))
  | False =>
    (f22 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) = (t : forall 'B. (forall 'A. 'A -> List ('A)) -> 'B -> List ('B)) Int64
    (f2 : Int64 -> List (Int64)) = (f22 : (forall 'A. 'A -> List ('A)) -> Int64 -> List (Int64)) (t2 : forall 'A. 'A -> List ('A))
    (len : List (Int64) -> Uint32) = (list_length : forall 'A. List ('A) -> Uint32) Int64
    (one : Int64) = (Int64 1)
    (f2l : List (Int64)) = (f2 : Int64 -> List (Int64)) (one : Int64)
    (_expr_0 : Uint32) = (len : List (Int64) -> Uint32) (f2l : List (Int64))
