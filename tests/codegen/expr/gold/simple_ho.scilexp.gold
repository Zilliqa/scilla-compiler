Closure converted AST:
fundef ($fundef_2 : [[Int32] -> Int32] -> ([Int32] -> Int32)) ((h : [Int32] -> Int32) : [Int32] -> Int32)
environment: ()
body:
  decl ($retval_3 : [Int32] -> Int32)
  allocate_closure_env ($fundef_4 : [Int32] -> Int32)
  [($fundef_4 : [Int32] -> Int32)]((h : [Int32] -> Int32)) <- (h : [Int32] -> Int32)
  ($retval_3 : [Int32] -> Int32) = [($fundef_4 : [Int32] -> Int32)]
  ret ($retval_3 : [Int32] -> Int32)

fundef ($fundef_4 : [Int32] -> Int32) ((i : Int32) : Int32)
environment: ((h : [Int32] -> Int32) : [Int32] -> Int32)
body:
  (h : [Int32] -> Int32) <- [($fundef_4 : [Int32] -> Int32)]((h : [Int32] -> Int32))
  decl ($retval_5 : Int32)
  decl ($h_0 : Int32)
  ($h_0 : Int32) = (h : [Int32] -> Int32) (i : Int32)
  ($retval_5 : Int32) = ($h_0 : Int32)
  ret ($retval_5 : Int32)

expr_body:
  decl ($expr_1 : [[Int32] -> Int32] -> ([Int32] -> Int32))
  decl (ho : [[Int32] -> Int32] -> ([Int32] -> Int32))
  (ho : [[Int32] -> Int32] -> ([Int32] -> Int32)) = [($fundef_2 : [[Int32] -> Int32] -> ([Int32] -> Int32))]
  ($expr_1 : [[Int32] -> Int32] -> ([Int32] -> Int32)) = (ho : [[Int32] -> Int32] -> ([Int32] -> Int32))
  ret ($expr_1 : [[Int32] -> Int32] -> ([Int32] -> Int32))

Specialized types:
ADTs:

Maps:
  
ByStrX: 

LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"$TyDescrTy_PrimTyp_6" = type { i32, i32 }
%_TyDescrTy_Typ = type { i32, i8* }
%"$$fundef_4_env_31" = type { { %_Int32 (i8*, %_Int32)*, i8* } }
%_Int32 = type { i32 }
%"$$fundef_2_env_32" = type {}

@"$TyDescr_Int32_Prim_7" = global %"$TyDescrTy_PrimTyp_6" zeroinitializer
@"$TyDescr_Int32_8" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Int32_Prim_7" to i8*) }
@"$TyDescr_Uint32_Prim_9" = global %"$TyDescrTy_PrimTyp_6" { i32 1, i32 0 }
@"$TyDescr_Uint32_10" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Uint32_Prim_9" to i8*) }
@"$TyDescr_Int64_Prim_11" = global %"$TyDescrTy_PrimTyp_6" { i32 0, i32 1 }
@"$TyDescr_Int64_12" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Int64_Prim_11" to i8*) }
@"$TyDescr_Uint64_Prim_13" = global %"$TyDescrTy_PrimTyp_6" { i32 1, i32 1 }
@"$TyDescr_Uint64_14" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Uint64_Prim_13" to i8*) }
@"$TyDescr_Int128_Prim_15" = global %"$TyDescrTy_PrimTyp_6" { i32 0, i32 2 }
@"$TyDescr_Int128_16" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Int128_Prim_15" to i8*) }
@"$TyDescr_Uint128_Prim_17" = global %"$TyDescrTy_PrimTyp_6" { i32 1, i32 2 }
@"$TyDescr_Uint128_18" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Uint128_Prim_17" to i8*) }
@"$TyDescr_Int256_Prim_19" = global %"$TyDescrTy_PrimTyp_6" { i32 0, i32 3 }
@"$TyDescr_Int256_20" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Int256_Prim_19" to i8*) }
@"$TyDescr_Uint256_Prim_21" = global %"$TyDescrTy_PrimTyp_6" { i32 1, i32 3 }
@"$TyDescr_Uint256_22" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Uint256_Prim_21" to i8*) }
@"$TyDescr_String_Prim_23" = global %"$TyDescrTy_PrimTyp_6" { i32 2, i32 0 }
@"$TyDescr_String_24" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_String_Prim_23" to i8*) }
@"$TyDescr_Bystr_Prim_25" = global %"$TyDescrTy_PrimTyp_6" { i32 7, i32 0 }
@"$TyDescr_Bystr_26" = global %_TyDescrTy_Typ { i32 0, i8* bitcast (%"$TyDescrTy_PrimTyp_6"* @"$TyDescr_Bystr_Prim_25" to i8*) }

define %_Int32 @"$fundef_4"(%"$$fundef_4_env_31"*, %_Int32) {
entry:
  %"$$fundef_4_env_h_41" = getelementptr inbounds %"$$fundef_4_env_31", %"$$fundef_4_env_31"* %0, i32 0, i32 0
  %"$h_envload_42" = load { %_Int32 (i8*, %_Int32)*, i8* }, { %_Int32 (i8*, %_Int32)*, i8* }* %"$$fundef_4_env_h_41"
  %h = alloca { %_Int32 (i8*, %_Int32)*, i8* }
  store { %_Int32 (i8*, %_Int32)*, i8* } %"$h_envload_42", { %_Int32 (i8*, %_Int32)*, i8* }* %h
  %"$retval_5" = alloca %_Int32
  %"$h_0" = alloca %_Int32
  %"$h_43" = load { %_Int32 (i8*, %_Int32)*, i8* }, { %_Int32 (i8*, %_Int32)*, i8* }* %h
  %"$h_fptr_44" = extractvalue { %_Int32 (i8*, %_Int32)*, i8* } %"$h_43", 0
  %"$h_envptr_45" = extractvalue { %_Int32 (i8*, %_Int32)*, i8* } %"$h_43", 1
  %"$h_call_46" = call %_Int32 %"$h_fptr_44"(i8* %"$h_envptr_45", %_Int32 %1)
  store %_Int32 %"$h_call_46", %_Int32* %"$h_0"
  %"$$h_0_47" = load %_Int32, %_Int32* %"$h_0"
  store %_Int32 %"$$h_0_47", %_Int32* %"$retval_5"
  %"$$retval_5_48" = load %_Int32, %_Int32* %"$retval_5"
  ret %_Int32 %"$$retval_5_48"
}

define { %_Int32 (i8*, %_Int32)*, i8* } @"$fundef_2"(%"$$fundef_2_env_32"*, { %_Int32 (i8*, %_Int32)*, i8* }) {
entry:
  %"$retval_3" = alloca { %_Int32 (i8*, %_Int32)*, i8* }
  %malloccall = tail call i8* @malloc(i32 trunc (i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2) to i32))
  %"$$fundef_4_envp_33" = bitcast i8* %malloccall to %"$$fundef_4_env_31"*
  %"$$fundef_4_env_voidp_35" = bitcast %"$$fundef_4_env_31"* %"$$fundef_4_envp_33" to i8*
  %"$$fundef_4_cloval_36" = insertvalue { %_Int32 (i8*, %_Int32)*, i8* } { %_Int32 (i8*, %_Int32)* bitcast (%_Int32 (%"$$fundef_4_env_31"*, %_Int32)* @"$fundef_4" to %_Int32 (i8*, %_Int32)*), i8* undef }, i8* %"$$fundef_4_env_voidp_35", 1
  %"$$fundef_4_envp_37" = extractvalue { %_Int32 (i8*, %_Int32)*, i8* } %"$$fundef_4_cloval_36", 1
  %"$$fundef_4_envp_38" = bitcast i8* %"$$fundef_4_envp_37" to %"$$fundef_4_env_31"*
  %"$$fundef_4_env_h_39" = getelementptr inbounds %"$$fundef_4_env_31", %"$$fundef_4_env_31"* %"$$fundef_4_envp_38", i32 0, i32 0
  store { %_Int32 (i8*, %_Int32)*, i8* } %1, { %_Int32 (i8*, %_Int32)*, i8* }* %"$$fundef_4_env_h_39"
  store { %_Int32 (i8*, %_Int32)*, i8* } %"$$fundef_4_cloval_36", { %_Int32 (i8*, %_Int32)*, i8* }* %"$retval_3"
  %"$$retval_3_40" = load { %_Int32 (i8*, %_Int32)*, i8* }, { %_Int32 (i8*, %_Int32)*, i8* }* %"$retval_3"
  ret { %_Int32 (i8*, %_Int32)*, i8* } %"$$retval_3_40"
}

declare noalias i8* @malloc(i32)

define { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* } @"$scilla_expr_49"(i8*) {
entry:
  %"$expr_1" = alloca { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* }
  %ho = alloca { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* }
  store { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* } { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })* bitcast ({ %_Int32 (i8*, %_Int32)*, i8* } (%"$$fundef_2_env_32"*, { %_Int32 (i8*, %_Int32)*, i8* })* @"$fundef_2" to { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*), i8* null }, { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* }* %ho
  %"$ho_53" = load { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* }, { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* }* %ho
  store { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* } %"$ho_53", { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* }* %"$expr_1"
  %"$$expr_1_54" = load { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* }, { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* }* %"$expr_1"
  ret { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* } %"$$expr_1_54"
}

declare void @_print_scilla_val(%_TyDescrTy_Typ*, i8*)

define void @scilla_main() {
entry:
  %"$cloval_55" = call { { %_Int32 (i8*, %_Int32)*, i8* } (i8*, { %_Int32 (i8*, %_Int32)*, i8* })*, i8* } @"$scilla_expr_49"(i8* null)
  ret void
}

