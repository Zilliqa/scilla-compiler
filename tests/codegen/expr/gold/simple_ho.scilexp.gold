Closure converted AST:
fundef ($fundef_2 : [[Int32] -> Int32] -> ([Int32] -> Int32)) ((h : [Int32] -> Int32) : [Int32] -> Int32)
environment: ()
body:
  decl ($retval_3 : [Int32] -> Int32)
  allocate_closure_env ($fundef_4 : [Int32] -> Int32)
  [($fundef_4 : [Int32] -> Int32)]((h : [Int32] -> Int32)) <- (h : [Int32] -> Int32)
  ($retval_3 : [Int32] -> Int32) = [($fundef_4 : [Int32] -> Int32)]
  ret ($retval_3 : [Int32] -> Int32)

fundef ($fundef_4 : [Int32] -> Int32) ((i : Int32) : Int32)
environment: ((h : [Int32] -> Int32) : [Int32] -> Int32)
body:
  (h : [Int32] -> Int32) <- [($fundef_4 : [Int32] -> Int32)]((h : [Int32] -> Int32))
  decl ($retval_5 : Int32)
  decl ($h_0 : Int32)
  ($h_0 : Int32) = (h : [Int32] -> Int32) (i : Int32)
  ($retval_5 : Int32) = ($h_0 : Int32)
  ret ($retval_5 : Int32)

expr_body:
  decl ($expr_1 : [[Int32] -> Int32] -> ([Int32] -> Int32))
  decl (ho : [[Int32] -> Int32] -> ([Int32] -> Int32))
  (ho : [[Int32] -> Int32] -> ([Int32] -> Int32)) = [($fundef_2 : [[Int32] -> Int32] -> ([Int32] -> Int32))]
  ($expr_1 : [[Int32] -> Int32] -> ([Int32] -> Int32)) = (ho : [[Int32] -> Int32] -> ([Int32] -> Int32))
  ret ($expr_1 : [[Int32] -> Int32] -> ([Int32] -> Int32))

Type specialized ADTs/Maps:
ADTs:

Maps:
  

LLVM module:
; ModuleID = 'scilla_expr'
source_filename = "scilla_expr"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"$$fundef_4_env_6" = type { { %Int32 (void*, %Int32)*, void* } }
%Int32 = type { i32 }
%"$$fundef_2_env_7" = type {}

define %Int32 @"$fundef_4"(%"$$fundef_4_env_6"*, %Int32) {
entry:
  %"$$fundef_4_env_h_16" = getelementptr inbounds %"$$fundef_4_env_6", %"$$fundef_4_env_6"* %0, i32 0, i32 0
  %"$h_envload_17" = load { %Int32 (void*, %Int32)*, void* }, { %Int32 (void*, %Int32)*, void* }* %"$$fundef_4_env_h_16"
  %h = alloca { %Int32 (void*, %Int32)*, void* }
  store { %Int32 (void*, %Int32)*, void* } %"$h_envload_17", { %Int32 (void*, %Int32)*, void* }* %h
  %"$retval_5" = alloca %Int32
  %"$h_0" = alloca %Int32
  %"$h_18" = load { %Int32 (void*, %Int32)*, void* }, { %Int32 (void*, %Int32)*, void* }* %h
  %"$h_fptr_19" = extractvalue { %Int32 (void*, %Int32)*, void* } %"$h_18", 0
  %"$h_envptr_20" = extractvalue { %Int32 (void*, %Int32)*, void* } %"$h_18", 1
  %"$h_call_21" = call %Int32 %"$h_fptr_19"(void* %"$h_envptr_20", %Int32 %1)
  store %Int32 %"$h_call_21", %Int32* %"$h_0"
  %"$$h_0_22" = load %Int32, %Int32* %"$h_0"
  store %Int32 %"$$h_0_22", %Int32* %"$retval_5"
  %"$$retval_5_23" = load %Int32, %Int32* %"$retval_5"
  ret %Int32 %"$$retval_5_23"
}

define { %Int32 (void*, %Int32)*, void* } @"$fundef_2"(%"$$fundef_2_env_7"*, { %Int32 (void*, %Int32)*, void* }) {
entry:
  %"$retval_3" = alloca { %Int32 (void*, %Int32)*, void* }
  %malloccall = tail call i8* @malloc(i32 trunc (i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2) to i32))
  %"$$fundef_4_envp_8" = bitcast i8* %malloccall to %"$$fundef_4_env_6"*
  %"$$fundef_4_env_voidp_10" = bitcast %"$$fundef_4_env_6"* %"$$fundef_4_envp_8" to void*
  %"$$fundef_4_cloval_11" = insertvalue { %Int32 (void*, %Int32)*, void* } { %Int32 (void*, %Int32)* bitcast (%Int32 (%"$$fundef_4_env_6"*, %Int32)* @"$fundef_4" to %Int32 (void*, %Int32)*), void* undef }, void* %"$$fundef_4_env_voidp_10", 1
  %"$$fundef_4_envp_12" = extractvalue { %Int32 (void*, %Int32)*, void* } %"$$fundef_4_cloval_11", 1
  %"$$fundef_4_envp_13" = bitcast void* %"$$fundef_4_envp_12" to %"$$fundef_4_env_6"*
  %"$$fundef_4_env_h_14" = getelementptr inbounds %"$$fundef_4_env_6", %"$$fundef_4_env_6"* %"$$fundef_4_envp_13", i32 0, i32 0
  store { %Int32 (void*, %Int32)*, void* } %1, { %Int32 (void*, %Int32)*, void* }* %"$$fundef_4_env_h_14"
  store { %Int32 (void*, %Int32)*, void* } %"$$fundef_4_cloval_11", { %Int32 (void*, %Int32)*, void* }* %"$retval_3"
  %"$$retval_3_15" = load { %Int32 (void*, %Int32)*, void* }, { %Int32 (void*, %Int32)*, void* }* %"$retval_3"
  ret { %Int32 (void*, %Int32)*, void* } %"$$retval_3_15"
}

declare noalias i8* @malloc(i32)

define { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* } @"$scilla_expr_24"(void*) {
entry:
  %"$expr_1" = alloca { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* }
  %ho = alloca { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* }
  store { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* } { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })* bitcast ({ %Int32 (void*, %Int32)*, void* } (%"$$fundef_2_env_7"*, { %Int32 (void*, %Int32)*, void* })* @"$fundef_2" to { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*), void* null }, { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* }* %ho
  %"$ho_28" = load { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* }, { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* }* %ho
  store { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* } %"$ho_28", { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* }* %"$expr_1"
  %"$$expr_1_29" = load { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* }, { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* }* %"$expr_1"
  ret { { %Int32 (void*, %Int32)*, void* } (void*, { %Int32 (void*, %Int32)*, void* })*, void* } %"$$expr_1_29"
}

